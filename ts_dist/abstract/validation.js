"use strict";
/* eslint-disable */
// tslint:disable
/**
 * Hospital Management Service
 *
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator+.
 * https://github.com/karlvr/openapi-generator-plus
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.modelApiCreateUser201ResponseFromJson = exports.modelApiCreateUserToJson = exports.modelApiCreateUserFromJson = exports.modelApiCreateDoctor404ResponseToJson = exports.modelApiCreateDoctor404ResponseFromJson = exports.modelApiCreateDoctor201ResponseToJson = exports.modelApiCreateDoctor201ResponseFromJson = exports.modelApiCreateDoctorToJson = exports.modelApiCreateDoctorFromJson = exports.modelApiCreateAppointment500ResponseToJson = exports.modelApiCreateAppointment500ResponseFromJson = exports.modelApiCreateAppointment404ResponseToJson = exports.modelApiCreateAppointment404ResponseFromJson = exports.modelApiCreateAppointment201ResponseToJson = exports.modelApiCreateAppointment201ResponseFromJson = exports.modelApiCreateAppointmentToJson = exports.modelApiCreateAppointmentFromJson = exports.timeToJson = exports.parseTime = exports.timeFromJson = exports.dateTimeToJson = exports.parseDateTime = exports.dateTimeFromJson = exports.dateToJson = exports.parseDate = exports.dateFromJson = exports.parseNumber = exports.numberToJson = exports.numberFromJson = exports.parseInteger = exports.integerToJson = exports.integerFromJson = exports.parseString = exports.binaryToJson = exports.binaryFromJson = exports.stringToJson = exports.stringFromJson = exports.parseBoolean = exports.booleanToJson = exports.booleanFromJson = exports.parseUnsupported = exports.unsupportedToJson = exports.unsupportedFromJson = exports.allowNullOrUndefined = exports.allowUndefined = exports.allowNull = exports.mapToJson = exports.mapFromJson = exports.arrayToJson = exports.arrayFromJson = void 0;
exports.modelApiUpdatepatient404ResponseToJson = exports.modelApiUpdatepatient404ResponseFromJson = exports.modelApiUpdatepatient200ResponseToJson = exports.modelApiUpdatepatient200ResponseFromJson = exports.modelApiSignInRequestToJson = exports.modelApiSignInRequestFromJson = exports.modelApiSignIn500ResponseToJson = exports.modelApiSignIn500ResponseFromJson = exports.modelApiSignIn404ResponseToJson = exports.modelApiSignIn404ResponseFromJson = exports.modelApiSignIn200ResponseToJson = exports.modelApiSignIn200ResponseFromJson = exports.modelApiGetProfile404ResponseToJson = exports.modelApiGetProfile404ResponseFromJson = exports.modelApiGetProfile200ResponseToJson = exports.modelApiGetProfile200ResponseFromJson = exports.modelApiGetDoctorDataToJson = exports.modelApiGetDoctorDataFromJson = exports.modelApiGetDoctor500ResponseToJson = exports.modelApiGetDoctor500ResponseFromJson = exports.modelApiGetDoctor404ResponseToJson = exports.modelApiGetDoctor404ResponseFromJson = exports.modelApiDoctorSignRequestToJson = exports.modelApiDoctorSignRequestFromJson = exports.modelApiDoctorSign500ResponseToJson = exports.modelApiDoctorSign500ResponseFromJson = exports.modelApiDoctorSign404ResponseToJson = exports.modelApiDoctorSign404ResponseFromJson = exports.modelApiDoctorSign200ResponseToJson = exports.modelApiDoctorSign200ResponseFromJson = exports.modelApiCreateUser404ResponseToJson = exports.modelApiCreateUser404ResponseFromJson = exports.modelApiCreateUser201ResponseToJson = void 0;
function arrayFromJson(next) {
    return function (name, value) {
        if (typeof value !== 'object' || typeof value.length !== 'number') {
            throw `Invalid type for ${name}: expected array got ${typeof value}`;
        }
        const result = [];
        for (const el of value) {
            result.push(next(name, el));
        }
        return result;
    };
}
exports.arrayFromJson = arrayFromJson;
function arrayToJson(next) {
    return arrayFromJson(next);
}
exports.arrayToJson = arrayToJson;
function mapFromJson(next) {
    return function (name, value) {
        if (typeof value !== 'object') {
            throw `Invalid type for ${name}: expected object got ${typeof value}`;
        }
        const result = {};
        for (const key in value) {
            if (value.hasOwnProperty(key)) {
                result[key] = next(name, value[key]);
            }
        }
        return result;
    };
}
exports.mapFromJson = mapFromJson;
function mapToJson(next) {
    return mapFromJson(next);
}
exports.mapToJson = mapToJson;
function allowNull(next) {
    return function (name, value) {
        if (value === null) {
            return null;
        }
        return next(name, value);
    };
}
exports.allowNull = allowNull;
function allowUndefined(next) {
    return function (name, value) {
        if (value === undefined) {
            return undefined;
        }
        return next(name, value);
    };
}
exports.allowUndefined = allowUndefined;
function allowNullOrUndefined(next) {
    return function (name, value) {
        if (value === null) {
            return null;
        }
        if (value === undefined) {
            return undefined;
        }
        return next(name, value);
    };
}
exports.allowNullOrUndefined = allowNullOrUndefined;
function unsupportedFromJson(name, value) {
    if (value === undefined) {
        throw `Invalid type for ${name}: expected unknown got undefined`;
    }
    return value;
}
exports.unsupportedFromJson = unsupportedFromJson;
function unsupportedToJson(name, value) {
    return unsupportedFromJson(name, value);
}
exports.unsupportedToJson = unsupportedToJson;
function parseUnsupported(name, value) {
    if (value === undefined) {
        throw `Invalid value for ${name}: expected unknown got undefined`;
    }
    return value;
}
exports.parseUnsupported = parseUnsupported;
function booleanFromJson(name, value) {
    if (typeof value !== 'boolean') {
        throw `Invalid type for ${name}: expected boolean got ${typeof value}`;
    }
    return value;
}
exports.booleanFromJson = booleanFromJson;
function booleanToJson(name, value) {
    return booleanFromJson(name, value);
}
exports.booleanToJson = booleanToJson;
function parseBoolean(name, value) {
    if (value === 'true') {
        return true;
    }
    else if (value === 'false') {
        return false;
    }
    else {
        throw `Invalid value for ${name}: expected boolean got "${value}"`;
    }
}
exports.parseBoolean = parseBoolean;
function stringFromJson(name, value) {
    if (typeof value !== 'string') {
        throw `Invalid type for ${name}: expected string got ${typeof value}`;
    }
    return value;
}
exports.stringFromJson = stringFromJson;
function stringToJson(name, value) {
    return stringFromJson(name, value);
}
exports.stringToJson = stringToJson;
function binaryFromJson(name, value) {
    if (typeof value !== 'string') {
        throw `Invalid type for ${name}: expected string got ${typeof value}`;
    }
    return new Buffer(value, 'base64');
}
exports.binaryFromJson = binaryFromJson;
function binaryToJson(name, value) {
    if (typeof value === 'string') {
        return value;
    }
    else {
        return value.toString('base64');
    }
}
exports.binaryToJson = binaryToJson;
function parseString(name, value) {
    if (value === undefined) {
        throw `Invalid value for ${name}: expected string got undefined`;
    }
    if (typeof value === 'string') {
        return value;
    }
    if (typeof value === 'object' && typeof value.length === 'number') {
        if (value.length > 0) {
            return value[0];
        }
    }
    throw `Invalid value for ${name}: expected string got ${typeof value}`;
}
exports.parseString = parseString;
function integerFromJson(name, value) {
    if (typeof value !== 'number') {
        throw `Invalid type for ${name}: expected number got ${typeof value}`;
    }
    if (isNaN(value)) {
        throw `Invalid NaN for ${name}`;
    }
    if (Math.floor(value) !== value) {
        throw `Invalid value for ${name}: expected integer got "${value}"`;
    }
    return value;
}
exports.integerFromJson = integerFromJson;
function integerToJson(name, value) {
    return integerFromJson(name, value);
}
exports.integerToJson = integerToJson;
function parseInteger(name, value) {
    if (typeof value === 'object' && typeof value.length === 'number' && value.length > 0) {
        value = value[0];
    }
    if (typeof value === 'string') {
        if (value.indexOf('.') !== -1) {
            throw `Invalid value for ${name}: expected integer got "${value}"`;
        }
        const result = parseInt(value, 10);
        if (isNaN(result)) {
            throw `Invalid value for ${name}: expected integer got "${value}"`;
        }
        return result;
    }
    throw `Invalid value for ${name}: expected integer got ${typeof value}`;
}
exports.parseInteger = parseInteger;
function numberFromJson(name, value) {
    if (typeof value !== 'number') {
        throw `Invalid type for ${name}: expected number got ${typeof value}`;
    }
    if (isNaN(value)) {
        throw `Invalid NaN for ${name}`;
    }
    return value;
}
exports.numberFromJson = numberFromJson;
function numberToJson(name, value) {
    return numberFromJson(name, value);
}
exports.numberToJson = numberToJson;
function parseNumber(name, value) {
    if (typeof value === 'object' && typeof value.length === 'number' && value.length > 0) {
        value = value[0];
    }
    if (typeof value === 'string') {
        const result = parseFloat(value);
        if (isNaN(result)) {
            throw `Invalid value for ${name}: expected float got "${value}"`;
        }
        return result;
    }
    throw `Invalid value for ${name}: expected number got ${typeof value}`;
}
exports.parseNumber = parseNumber;
function dateFromJson(name, value) {
    if (typeof value !== 'string') {
        throw `Invalid type for ${name}: expected string got ${typeof value}`;
    }
    if (!value.match(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)) {
        throw `Invalid value for ${name}: expected valid date string got "${value}"`;
    }
    return value;
}
exports.dateFromJson = dateFromJson;
function parseDate(name, value) {
    return dateFromJson(name, value);
}
exports.parseDate = parseDate;
function dateToJson(name, value) {
    return dateFromJson(name, value);
}
exports.dateToJson = dateToJson;
function dateTimeFromJson(name, value) {
    if (typeof value !== 'string') {
        throw `Invalid type for ${name}: expected string got ${typeof value}`;
    }
    if (!value.match(/^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}(:[0-9]{2}(\.[0-9]+)?)?(Z|(\+|-)[0-9]{2}(:?[0-9]{2})?)$/)) {
        throw `Invalid value for ${name}: expected valid datetime string got "${value}"`;
    }
    return new Date(value);
}
exports.dateTimeFromJson = dateTimeFromJson;
function parseDateTime(name, value) {
    return dateTimeFromJson(name, value);
}
exports.parseDateTime = parseDateTime;
function dateTimeToJson(name, value) {
    if (typeof value !== 'object' || typeof value.toISOString !== 'function') {
        throw `Invalid type for ${name}: expected Date got ${typeof value}`;
    }
    return value.toISOString();
}
exports.dateTimeToJson = dateTimeToJson;
function timeFromJson(name, value) {
    if (typeof value !== 'string') {
        throw `Invalid type for ${name}: expected string got ${typeof value}`;
    }
    if (!value.match(/^[0-9]{2}:[0-9]{2}(:[0-9]{2}(\.[0-9]+)?)?$/)) {
        throw `Invalid value for ${name}: expected valid time string got "${value}"`;
    }
    return value;
}
exports.timeFromJson = timeFromJson;
function parseTime(name, value) {
    return timeFromJson(name, value);
}
exports.parseTime = parseTime;
function timeToJson(name, value) {
    return timeFromJson(name, value);
}
exports.timeToJson = timeToJson;
/* Model conversion functions */
const ApiCreateAppointmentKeys = ['patient_id', 'doctor_id', 'appointment_date', 'appointment_time'];
function modelApiCreateAppointmentFromJsonContent(name, value, knownKeys = {}) {
    if (typeof value !== 'object' || value === undefined || value === null) {
        throw `Invalid type for ${name}: expected object got ${typeof value}`;
    }
    ApiCreateAppointmentKeys.forEach(k => knownKeys[k] = true);
    const result = {
        'patient_id': allowUndefined(stringFromJson)(`${name}.patient_id`, value['patient_id']),
        'doctor_id': allowUndefined(stringFromJson)(`${name}.doctor_id`, value['doctor_id']),
        'appointment_date': allowUndefined(stringFromJson)(`${name}.appointment_date`, value['appointment_date']),
        'appointment_time': allowUndefined(stringFromJson)(`${name}.appointment_time`, value['appointment_time']),
    };
    return result;
}
function modelApiCreateAppointmentToJsonContent(name, value, knownKeys = {}) {
    if (typeof value !== 'object' || value === undefined || value === null) {
        throw `Invalid type for ${name}: expected object got ${typeof value}`;
    }
    ApiCreateAppointmentKeys.forEach(k => knownKeys[k] = true);
    const result = {
        'patient_id': allowUndefined(stringToJson)(`${name}.patient_id`, value['patient_id']),
        'doctor_id': allowUndefined(stringToJson)(`${name}.doctor_id`, value['doctor_id']),
        'appointment_date': allowUndefined(stringToJson)(`${name}.appointment_date`, value['appointment_date']),
        'appointment_time': allowUndefined(stringToJson)(`${name}.appointment_time`, value['appointment_time']),
    };
    return result;
}
function modelApiCreateAppointmentFromJson(name, value) {
    const knownKeys = {};
    const result = modelApiCreateAppointmentFromJsonContent(name, value, knownKeys);
    /* Known keys */
    // TODO if we don't ignore unknown properties
    for (const key of Object.keys(value)) {
        if (!knownKeys[key]) {
            // throw `Unexpected key: ${key}`
            console.warn(`Unexpected key in Api.CreateAppointment: ${key}`);
        }
    }
    return result;
}
exports.modelApiCreateAppointmentFromJson = modelApiCreateAppointmentFromJson;
function modelApiCreateAppointmentToJson(name, value) {
    const knownKeys = {};
    const result = modelApiCreateAppointmentToJsonContent(name, value, knownKeys);
    /* Known keys */
    // TODO if we don't ignore unknown properties
    for (const key of Object.keys(value)) {
        if (!knownKeys[key]) {
            // throw `Unexpected key: ${key}`
            console.warn(`Unexpected key in Api.CreateAppointment: ${key}`);
        }
    }
    return result;
}
exports.modelApiCreateAppointmentToJson = modelApiCreateAppointmentToJson;
const ApiCreateAppointment201ResponseKeys = ['message'];
function modelApiCreateAppointment201ResponseFromJsonContent(name, value, knownKeys = {}) {
    if (typeof value !== 'object' || value === undefined || value === null) {
        throw `Invalid type for ${name}: expected object got ${typeof value}`;
    }
    ApiCreateAppointment201ResponseKeys.forEach(k => knownKeys[k] = true);
    const result = {
        'message': allowUndefined(stringFromJson)(`${name}.message`, value['message']),
    };
    return result;
}
function modelApiCreateAppointment201ResponseToJsonContent(name, value, knownKeys = {}) {
    if (typeof value !== 'object' || value === undefined || value === null) {
        throw `Invalid type for ${name}: expected object got ${typeof value}`;
    }
    ApiCreateAppointment201ResponseKeys.forEach(k => knownKeys[k] = true);
    const result = {
        'message': allowUndefined(stringToJson)(`${name}.message`, value['message']),
    };
    return result;
}
function modelApiCreateAppointment201ResponseFromJson(name, value) {
    const knownKeys = {};
    const result = modelApiCreateAppointment201ResponseFromJsonContent(name, value, knownKeys);
    /* Known keys */
    // TODO if we don't ignore unknown properties
    for (const key of Object.keys(value)) {
        if (!knownKeys[key]) {
            // throw `Unexpected key: ${key}`
            console.warn(`Unexpected key in Api.CreateAppointment201Response: ${key}`);
        }
    }
    return result;
}
exports.modelApiCreateAppointment201ResponseFromJson = modelApiCreateAppointment201ResponseFromJson;
function modelApiCreateAppointment201ResponseToJson(name, value) {
    const knownKeys = {};
    const result = modelApiCreateAppointment201ResponseToJsonContent(name, value, knownKeys);
    /* Known keys */
    // TODO if we don't ignore unknown properties
    for (const key of Object.keys(value)) {
        if (!knownKeys[key]) {
            // throw `Unexpected key: ${key}`
            console.warn(`Unexpected key in Api.CreateAppointment201Response: ${key}`);
        }
    }
    return result;
}
exports.modelApiCreateAppointment201ResponseToJson = modelApiCreateAppointment201ResponseToJson;
const ApiCreateAppointment404ResponseKeys = ['message'];
function modelApiCreateAppointment404ResponseFromJsonContent(name, value, knownKeys = {}) {
    if (typeof value !== 'object' || value === undefined || value === null) {
        throw `Invalid type for ${name}: expected object got ${typeof value}`;
    }
    ApiCreateAppointment404ResponseKeys.forEach(k => knownKeys[k] = true);
    const result = {
        'message': allowUndefined(stringFromJson)(`${name}.message`, value['message']),
    };
    return result;
}
function modelApiCreateAppointment404ResponseToJsonContent(name, value, knownKeys = {}) {
    if (typeof value !== 'object' || value === undefined || value === null) {
        throw `Invalid type for ${name}: expected object got ${typeof value}`;
    }
    ApiCreateAppointment404ResponseKeys.forEach(k => knownKeys[k] = true);
    const result = {
        'message': allowUndefined(stringToJson)(`${name}.message`, value['message']),
    };
    return result;
}
function modelApiCreateAppointment404ResponseFromJson(name, value) {
    const knownKeys = {};
    const result = modelApiCreateAppointment404ResponseFromJsonContent(name, value, knownKeys);
    /* Known keys */
    // TODO if we don't ignore unknown properties
    for (const key of Object.keys(value)) {
        if (!knownKeys[key]) {
            // throw `Unexpected key: ${key}`
            console.warn(`Unexpected key in Api.CreateAppointment404Response: ${key}`);
        }
    }
    return result;
}
exports.modelApiCreateAppointment404ResponseFromJson = modelApiCreateAppointment404ResponseFromJson;
function modelApiCreateAppointment404ResponseToJson(name, value) {
    const knownKeys = {};
    const result = modelApiCreateAppointment404ResponseToJsonContent(name, value, knownKeys);
    /* Known keys */
    // TODO if we don't ignore unknown properties
    for (const key of Object.keys(value)) {
        if (!knownKeys[key]) {
            // throw `Unexpected key: ${key}`
            console.warn(`Unexpected key in Api.CreateAppointment404Response: ${key}`);
        }
    }
    return result;
}
exports.modelApiCreateAppointment404ResponseToJson = modelApiCreateAppointment404ResponseToJson;
const ApiCreateAppointment500ResponseKeys = ['message'];
function modelApiCreateAppointment500ResponseFromJsonContent(name, value, knownKeys = {}) {
    if (typeof value !== 'object' || value === undefined || value === null) {
        throw `Invalid type for ${name}: expected object got ${typeof value}`;
    }
    ApiCreateAppointment500ResponseKeys.forEach(k => knownKeys[k] = true);
    const result = {
        'message': allowUndefined(stringFromJson)(`${name}.message`, value['message']),
    };
    return result;
}
function modelApiCreateAppointment500ResponseToJsonContent(name, value, knownKeys = {}) {
    if (typeof value !== 'object' || value === undefined || value === null) {
        throw `Invalid type for ${name}: expected object got ${typeof value}`;
    }
    ApiCreateAppointment500ResponseKeys.forEach(k => knownKeys[k] = true);
    const result = {
        'message': allowUndefined(stringToJson)(`${name}.message`, value['message']),
    };
    return result;
}
function modelApiCreateAppointment500ResponseFromJson(name, value) {
    const knownKeys = {};
    const result = modelApiCreateAppointment500ResponseFromJsonContent(name, value, knownKeys);
    /* Known keys */
    // TODO if we don't ignore unknown properties
    for (const key of Object.keys(value)) {
        if (!knownKeys[key]) {
            // throw `Unexpected key: ${key}`
            console.warn(`Unexpected key in Api.CreateAppointment500Response: ${key}`);
        }
    }
    return result;
}
exports.modelApiCreateAppointment500ResponseFromJson = modelApiCreateAppointment500ResponseFromJson;
function modelApiCreateAppointment500ResponseToJson(name, value) {
    const knownKeys = {};
    const result = modelApiCreateAppointment500ResponseToJsonContent(name, value, knownKeys);
    /* Known keys */
    // TODO if we don't ignore unknown properties
    for (const key of Object.keys(value)) {
        if (!knownKeys[key]) {
            // throw `Unexpected key: ${key}`
            console.warn(`Unexpected key in Api.CreateAppointment500Response: ${key}`);
        }
    }
    return result;
}
exports.modelApiCreateAppointment500ResponseToJson = modelApiCreateAppointment500ResponseToJson;
const ApiCreateDoctorKeys = ['name', 'email', 'password', 'address', 'mobile', 'specialization'];
function modelApiCreateDoctorFromJsonContent(name, value, knownKeys = {}) {
    if (typeof value !== 'object' || value === undefined || value === null) {
        throw `Invalid type for ${name}: expected object got ${typeof value}`;
    }
    ApiCreateDoctorKeys.forEach(k => knownKeys[k] = true);
    const result = {
        'name': allowUndefined(stringFromJson)(`${name}.name`, value['name']),
        'email': allowUndefined(stringFromJson)(`${name}.email`, value['email']),
        'password': allowUndefined(stringFromJson)(`${name}.password`, value['password']),
        'address': allowUndefined(stringFromJson)(`${name}.address`, value['address']),
        'mobile': allowUndefined(stringFromJson)(`${name}.mobile`, value['mobile']),
        'specialization': allowUndefined(stringFromJson)(`${name}.specialization`, value['specialization']),
    };
    return result;
}
function modelApiCreateDoctorToJsonContent(name, value, knownKeys = {}) {
    if (typeof value !== 'object' || value === undefined || value === null) {
        throw `Invalid type for ${name}: expected object got ${typeof value}`;
    }
    ApiCreateDoctorKeys.forEach(k => knownKeys[k] = true);
    const result = {
        'name': allowUndefined(stringToJson)(`${name}.name`, value['name']),
        'email': allowUndefined(stringToJson)(`${name}.email`, value['email']),
        'password': allowUndefined(stringToJson)(`${name}.password`, value['password']),
        'address': allowUndefined(stringToJson)(`${name}.address`, value['address']),
        'mobile': allowUndefined(stringToJson)(`${name}.mobile`, value['mobile']),
        'specialization': allowUndefined(stringToJson)(`${name}.specialization`, value['specialization']),
    };
    return result;
}
function modelApiCreateDoctorFromJson(name, value) {
    const knownKeys = {};
    const result = modelApiCreateDoctorFromJsonContent(name, value, knownKeys);
    /* Known keys */
    // TODO if we don't ignore unknown properties
    for (const key of Object.keys(value)) {
        if (!knownKeys[key]) {
            // throw `Unexpected key: ${key}`
            console.warn(`Unexpected key in Api.CreateDoctor: ${key}`);
        }
    }
    return result;
}
exports.modelApiCreateDoctorFromJson = modelApiCreateDoctorFromJson;
function modelApiCreateDoctorToJson(name, value) {
    const knownKeys = {};
    const result = modelApiCreateDoctorToJsonContent(name, value, knownKeys);
    /* Known keys */
    // TODO if we don't ignore unknown properties
    for (const key of Object.keys(value)) {
        if (!knownKeys[key]) {
            // throw `Unexpected key: ${key}`
            console.warn(`Unexpected key in Api.CreateDoctor: ${key}`);
        }
    }
    return result;
}
exports.modelApiCreateDoctorToJson = modelApiCreateDoctorToJson;
const ApiCreateDoctor201ResponseKeys = ['message'];
function modelApiCreateDoctor201ResponseFromJsonContent(name, value, knownKeys = {}) {
    if (typeof value !== 'object' || value === undefined || value === null) {
        throw `Invalid type for ${name}: expected object got ${typeof value}`;
    }
    ApiCreateDoctor201ResponseKeys.forEach(k => knownKeys[k] = true);
    const result = {
        'message': allowUndefined(stringFromJson)(`${name}.message`, value['message']),
    };
    return result;
}
function modelApiCreateDoctor201ResponseToJsonContent(name, value, knownKeys = {}) {
    if (typeof value !== 'object' || value === undefined || value === null) {
        throw `Invalid type for ${name}: expected object got ${typeof value}`;
    }
    ApiCreateDoctor201ResponseKeys.forEach(k => knownKeys[k] = true);
    const result = {
        'message': allowUndefined(stringToJson)(`${name}.message`, value['message']),
    };
    return result;
}
function modelApiCreateDoctor201ResponseFromJson(name, value) {
    const knownKeys = {};
    const result = modelApiCreateDoctor201ResponseFromJsonContent(name, value, knownKeys);
    /* Known keys */
    // TODO if we don't ignore unknown properties
    for (const key of Object.keys(value)) {
        if (!knownKeys[key]) {
            // throw `Unexpected key: ${key}`
            console.warn(`Unexpected key in Api.CreateDoctor201Response: ${key}`);
        }
    }
    return result;
}
exports.modelApiCreateDoctor201ResponseFromJson = modelApiCreateDoctor201ResponseFromJson;
function modelApiCreateDoctor201ResponseToJson(name, value) {
    const knownKeys = {};
    const result = modelApiCreateDoctor201ResponseToJsonContent(name, value, knownKeys);
    /* Known keys */
    // TODO if we don't ignore unknown properties
    for (const key of Object.keys(value)) {
        if (!knownKeys[key]) {
            // throw `Unexpected key: ${key}`
            console.warn(`Unexpected key in Api.CreateDoctor201Response: ${key}`);
        }
    }
    return result;
}
exports.modelApiCreateDoctor201ResponseToJson = modelApiCreateDoctor201ResponseToJson;
const ApiCreateDoctor404ResponseKeys = ['message'];
function modelApiCreateDoctor404ResponseFromJsonContent(name, value, knownKeys = {}) {
    if (typeof value !== 'object' || value === undefined || value === null) {
        throw `Invalid type for ${name}: expected object got ${typeof value}`;
    }
    ApiCreateDoctor404ResponseKeys.forEach(k => knownKeys[k] = true);
    const result = {
        'message': allowUndefined(stringFromJson)(`${name}.message`, value['message']),
    };
    return result;
}
function modelApiCreateDoctor404ResponseToJsonContent(name, value, knownKeys = {}) {
    if (typeof value !== 'object' || value === undefined || value === null) {
        throw `Invalid type for ${name}: expected object got ${typeof value}`;
    }
    ApiCreateDoctor404ResponseKeys.forEach(k => knownKeys[k] = true);
    const result = {
        'message': allowUndefined(stringToJson)(`${name}.message`, value['message']),
    };
    return result;
}
function modelApiCreateDoctor404ResponseFromJson(name, value) {
    const knownKeys = {};
    const result = modelApiCreateDoctor404ResponseFromJsonContent(name, value, knownKeys);
    /* Known keys */
    // TODO if we don't ignore unknown properties
    for (const key of Object.keys(value)) {
        if (!knownKeys[key]) {
            // throw `Unexpected key: ${key}`
            console.warn(`Unexpected key in Api.CreateDoctor404Response: ${key}`);
        }
    }
    return result;
}
exports.modelApiCreateDoctor404ResponseFromJson = modelApiCreateDoctor404ResponseFromJson;
function modelApiCreateDoctor404ResponseToJson(name, value) {
    const knownKeys = {};
    const result = modelApiCreateDoctor404ResponseToJsonContent(name, value, knownKeys);
    /* Known keys */
    // TODO if we don't ignore unknown properties
    for (const key of Object.keys(value)) {
        if (!knownKeys[key]) {
            // throw `Unexpected key: ${key}`
            console.warn(`Unexpected key in Api.CreateDoctor404Response: ${key}`);
        }
    }
    return result;
}
exports.modelApiCreateDoctor404ResponseToJson = modelApiCreateDoctor404ResponseToJson;
const ApiCreateUserKeys = ['name', 'email', 'password', 'gender', 'mobile', 'address', 'age', 'medical_history'];
function modelApiCreateUserFromJsonContent(name, value, knownKeys = {}) {
    if (typeof value !== 'object' || value === undefined || value === null) {
        throw `Invalid type for ${name}: expected object got ${typeof value}`;
    }
    ApiCreateUserKeys.forEach(k => knownKeys[k] = true);
    const result = {
        'name': allowUndefined(stringFromJson)(`${name}.name`, value['name']),
        'email': allowUndefined(stringFromJson)(`${name}.email`, value['email']),
        'password': allowUndefined(stringFromJson)(`${name}.password`, value['password']),
        'gender': allowUndefined(stringFromJson)(`${name}.gender`, value['gender']),
        'mobile': allowUndefined(stringFromJson)(`${name}.mobile`, value['mobile']),
        'address': allowUndefined(stringFromJson)(`${name}.address`, value['address']),
        'age': allowUndefined(numberFromJson)(`${name}.age`, value['age']),
        'medical_history': allowUndefined(stringFromJson)(`${name}.medical_history`, value['medical_history']),
    };
    return result;
}
function modelApiCreateUserToJsonContent(name, value, knownKeys = {}) {
    if (typeof value !== 'object' || value === undefined || value === null) {
        throw `Invalid type for ${name}: expected object got ${typeof value}`;
    }
    ApiCreateUserKeys.forEach(k => knownKeys[k] = true);
    const result = {
        'name': allowUndefined(stringToJson)(`${name}.name`, value['name']),
        'email': allowUndefined(stringToJson)(`${name}.email`, value['email']),
        'password': allowUndefined(stringToJson)(`${name}.password`, value['password']),
        'gender': allowUndefined(stringToJson)(`${name}.gender`, value['gender']),
        'mobile': allowUndefined(stringToJson)(`${name}.mobile`, value['mobile']),
        'address': allowUndefined(stringToJson)(`${name}.address`, value['address']),
        'age': allowUndefined(numberToJson)(`${name}.age`, value['age']),
        'medical_history': allowUndefined(stringToJson)(`${name}.medical_history`, value['medical_history']),
    };
    return result;
}
function modelApiCreateUserFromJson(name, value) {
    const knownKeys = {};
    const result = modelApiCreateUserFromJsonContent(name, value, knownKeys);
    /* Known keys */
    // TODO if we don't ignore unknown properties
    for (const key of Object.keys(value)) {
        if (!knownKeys[key]) {
            // throw `Unexpected key: ${key}`
            console.warn(`Unexpected key in Api.CreateUser: ${key}`);
        }
    }
    return result;
}
exports.modelApiCreateUserFromJson = modelApiCreateUserFromJson;
function modelApiCreateUserToJson(name, value) {
    const knownKeys = {};
    const result = modelApiCreateUserToJsonContent(name, value, knownKeys);
    /* Known keys */
    // TODO if we don't ignore unknown properties
    for (const key of Object.keys(value)) {
        if (!knownKeys[key]) {
            // throw `Unexpected key: ${key}`
            console.warn(`Unexpected key in Api.CreateUser: ${key}`);
        }
    }
    return result;
}
exports.modelApiCreateUserToJson = modelApiCreateUserToJson;
const ApiCreateUser201ResponseKeys = ['message'];
function modelApiCreateUser201ResponseFromJsonContent(name, value, knownKeys = {}) {
    if (typeof value !== 'object' || value === undefined || value === null) {
        throw `Invalid type for ${name}: expected object got ${typeof value}`;
    }
    ApiCreateUser201ResponseKeys.forEach(k => knownKeys[k] = true);
    const result = {
        'message': allowUndefined(stringFromJson)(`${name}.message`, value['message']),
    };
    return result;
}
function modelApiCreateUser201ResponseToJsonContent(name, value, knownKeys = {}) {
    if (typeof value !== 'object' || value === undefined || value === null) {
        throw `Invalid type for ${name}: expected object got ${typeof value}`;
    }
    ApiCreateUser201ResponseKeys.forEach(k => knownKeys[k] = true);
    const result = {
        'message': allowUndefined(stringToJson)(`${name}.message`, value['message']),
    };
    return result;
}
function modelApiCreateUser201ResponseFromJson(name, value) {
    const knownKeys = {};
    const result = modelApiCreateUser201ResponseFromJsonContent(name, value, knownKeys);
    /* Known keys */
    // TODO if we don't ignore unknown properties
    for (const key of Object.keys(value)) {
        if (!knownKeys[key]) {
            // throw `Unexpected key: ${key}`
            console.warn(`Unexpected key in Api.CreateUser201Response: ${key}`);
        }
    }
    return result;
}
exports.modelApiCreateUser201ResponseFromJson = modelApiCreateUser201ResponseFromJson;
function modelApiCreateUser201ResponseToJson(name, value) {
    const knownKeys = {};
    const result = modelApiCreateUser201ResponseToJsonContent(name, value, knownKeys);
    /* Known keys */
    // TODO if we don't ignore unknown properties
    for (const key of Object.keys(value)) {
        if (!knownKeys[key]) {
            // throw `Unexpected key: ${key}`
            console.warn(`Unexpected key in Api.CreateUser201Response: ${key}`);
        }
    }
    return result;
}
exports.modelApiCreateUser201ResponseToJson = modelApiCreateUser201ResponseToJson;
const ApiCreateUser404ResponseKeys = ['message'];
function modelApiCreateUser404ResponseFromJsonContent(name, value, knownKeys = {}) {
    if (typeof value !== 'object' || value === undefined || value === null) {
        throw `Invalid type for ${name}: expected object got ${typeof value}`;
    }
    ApiCreateUser404ResponseKeys.forEach(k => knownKeys[k] = true);
    const result = {
        'message': allowUndefined(stringFromJson)(`${name}.message`, value['message']),
    };
    return result;
}
function modelApiCreateUser404ResponseToJsonContent(name, value, knownKeys = {}) {
    if (typeof value !== 'object' || value === undefined || value === null) {
        throw `Invalid type for ${name}: expected object got ${typeof value}`;
    }
    ApiCreateUser404ResponseKeys.forEach(k => knownKeys[k] = true);
    const result = {
        'message': allowUndefined(stringToJson)(`${name}.message`, value['message']),
    };
    return result;
}
function modelApiCreateUser404ResponseFromJson(name, value) {
    const knownKeys = {};
    const result = modelApiCreateUser404ResponseFromJsonContent(name, value, knownKeys);
    /* Known keys */
    // TODO if we don't ignore unknown properties
    for (const key of Object.keys(value)) {
        if (!knownKeys[key]) {
            // throw `Unexpected key: ${key}`
            console.warn(`Unexpected key in Api.CreateUser404Response: ${key}`);
        }
    }
    return result;
}
exports.modelApiCreateUser404ResponseFromJson = modelApiCreateUser404ResponseFromJson;
function modelApiCreateUser404ResponseToJson(name, value) {
    const knownKeys = {};
    const result = modelApiCreateUser404ResponseToJsonContent(name, value, knownKeys);
    /* Known keys */
    // TODO if we don't ignore unknown properties
    for (const key of Object.keys(value)) {
        if (!knownKeys[key]) {
            // throw `Unexpected key: ${key}`
            console.warn(`Unexpected key in Api.CreateUser404Response: ${key}`);
        }
    }
    return result;
}
exports.modelApiCreateUser404ResponseToJson = modelApiCreateUser404ResponseToJson;
const ApiDoctorSign200ResponseKeys = ['id', 'email', 'name', 'mobile', 'specialization'];
function modelApiDoctorSign200ResponseFromJsonContent(name, value, knownKeys = {}) {
    if (typeof value !== 'object' || value === undefined || value === null) {
        throw `Invalid type for ${name}: expected object got ${typeof value}`;
    }
    ApiDoctorSign200ResponseKeys.forEach(k => knownKeys[k] = true);
    const result = {
        'id': allowUndefined(stringFromJson)(`${name}.id`, value['id']),
        'email': allowUndefined(stringFromJson)(`${name}.email`, value['email']),
        'name': allowUndefined(stringFromJson)(`${name}.name`, value['name']),
        'mobile': allowUndefined(stringFromJson)(`${name}.mobile`, value['mobile']),
        'specialization': allowUndefined(stringFromJson)(`${name}.specialization`, value['specialization']),
    };
    return result;
}
function modelApiDoctorSign200ResponseToJsonContent(name, value, knownKeys = {}) {
    if (typeof value !== 'object' || value === undefined || value === null) {
        throw `Invalid type for ${name}: expected object got ${typeof value}`;
    }
    ApiDoctorSign200ResponseKeys.forEach(k => knownKeys[k] = true);
    const result = {
        'id': allowUndefined(stringToJson)(`${name}.id`, value['id']),
        'email': allowUndefined(stringToJson)(`${name}.email`, value['email']),
        'name': allowUndefined(stringToJson)(`${name}.name`, value['name']),
        'mobile': allowUndefined(stringToJson)(`${name}.mobile`, value['mobile']),
        'specialization': allowUndefined(stringToJson)(`${name}.specialization`, value['specialization']),
    };
    return result;
}
function modelApiDoctorSign200ResponseFromJson(name, value) {
    const knownKeys = {};
    const result = modelApiDoctorSign200ResponseFromJsonContent(name, value, knownKeys);
    /* Known keys */
    // TODO if we don't ignore unknown properties
    for (const key of Object.keys(value)) {
        if (!knownKeys[key]) {
            // throw `Unexpected key: ${key}`
            console.warn(`Unexpected key in Api.DoctorSign200Response: ${key}`);
        }
    }
    return result;
}
exports.modelApiDoctorSign200ResponseFromJson = modelApiDoctorSign200ResponseFromJson;
function modelApiDoctorSign200ResponseToJson(name, value) {
    const knownKeys = {};
    const result = modelApiDoctorSign200ResponseToJsonContent(name, value, knownKeys);
    /* Known keys */
    // TODO if we don't ignore unknown properties
    for (const key of Object.keys(value)) {
        if (!knownKeys[key]) {
            // throw `Unexpected key: ${key}`
            console.warn(`Unexpected key in Api.DoctorSign200Response: ${key}`);
        }
    }
    return result;
}
exports.modelApiDoctorSign200ResponseToJson = modelApiDoctorSign200ResponseToJson;
const ApiDoctorSign404ResponseKeys = ['message'];
function modelApiDoctorSign404ResponseFromJsonContent(name, value, knownKeys = {}) {
    if (typeof value !== 'object' || value === undefined || value === null) {
        throw `Invalid type for ${name}: expected object got ${typeof value}`;
    }
    ApiDoctorSign404ResponseKeys.forEach(k => knownKeys[k] = true);
    const result = {
        'message': allowUndefined(stringFromJson)(`${name}.message`, value['message']),
    };
    return result;
}
function modelApiDoctorSign404ResponseToJsonContent(name, value, knownKeys = {}) {
    if (typeof value !== 'object' || value === undefined || value === null) {
        throw `Invalid type for ${name}: expected object got ${typeof value}`;
    }
    ApiDoctorSign404ResponseKeys.forEach(k => knownKeys[k] = true);
    const result = {
        'message': allowUndefined(stringToJson)(`${name}.message`, value['message']),
    };
    return result;
}
function modelApiDoctorSign404ResponseFromJson(name, value) {
    const knownKeys = {};
    const result = modelApiDoctorSign404ResponseFromJsonContent(name, value, knownKeys);
    /* Known keys */
    // TODO if we don't ignore unknown properties
    for (const key of Object.keys(value)) {
        if (!knownKeys[key]) {
            // throw `Unexpected key: ${key}`
            console.warn(`Unexpected key in Api.DoctorSign404Response: ${key}`);
        }
    }
    return result;
}
exports.modelApiDoctorSign404ResponseFromJson = modelApiDoctorSign404ResponseFromJson;
function modelApiDoctorSign404ResponseToJson(name, value) {
    const knownKeys = {};
    const result = modelApiDoctorSign404ResponseToJsonContent(name, value, knownKeys);
    /* Known keys */
    // TODO if we don't ignore unknown properties
    for (const key of Object.keys(value)) {
        if (!knownKeys[key]) {
            // throw `Unexpected key: ${key}`
            console.warn(`Unexpected key in Api.DoctorSign404Response: ${key}`);
        }
    }
    return result;
}
exports.modelApiDoctorSign404ResponseToJson = modelApiDoctorSign404ResponseToJson;
const ApiDoctorSign500ResponseKeys = [];
function modelApiDoctorSign500ResponseFromJsonContent(name, value, knownKeys = {}) {
    if (typeof value !== 'object' || value === undefined || value === null) {
        throw `Invalid type for ${name}: expected object got ${typeof value}`;
    }
    ApiDoctorSign500ResponseKeys.forEach(k => knownKeys[k] = true);
    const result = {};
    return result;
}
function modelApiDoctorSign500ResponseToJsonContent(name, value, knownKeys = {}) {
    if (typeof value !== 'object' || value === undefined || value === null) {
        throw `Invalid type for ${name}: expected object got ${typeof value}`;
    }
    ApiDoctorSign500ResponseKeys.forEach(k => knownKeys[k] = true);
    const result = {};
    return result;
}
function modelApiDoctorSign500ResponseFromJson(name, value) {
    const knownKeys = {};
    const result = modelApiDoctorSign500ResponseFromJsonContent(name, value, knownKeys);
    /* Known keys */
    // TODO if we don't ignore unknown properties
    for (const key of Object.keys(value)) {
        if (!knownKeys[key]) {
            // throw `Unexpected key: ${key}`
            console.warn(`Unexpected key in Api.DoctorSign500Response: ${key}`);
        }
    }
    return result;
}
exports.modelApiDoctorSign500ResponseFromJson = modelApiDoctorSign500ResponseFromJson;
function modelApiDoctorSign500ResponseToJson(name, value) {
    const knownKeys = {};
    const result = modelApiDoctorSign500ResponseToJsonContent(name, value, knownKeys);
    /* Known keys */
    // TODO if we don't ignore unknown properties
    for (const key of Object.keys(value)) {
        if (!knownKeys[key]) {
            // throw `Unexpected key: ${key}`
            console.warn(`Unexpected key in Api.DoctorSign500Response: ${key}`);
        }
    }
    return result;
}
exports.modelApiDoctorSign500ResponseToJson = modelApiDoctorSign500ResponseToJson;
const ApiDoctorSignRequestKeys = ['email', 'password'];
function modelApiDoctorSignRequestFromJsonContent(name, value, knownKeys = {}) {
    if (typeof value !== 'object' || value === undefined || value === null) {
        throw `Invalid type for ${name}: expected object got ${typeof value}`;
    }
    ApiDoctorSignRequestKeys.forEach(k => knownKeys[k] = true);
    const result = {
        'email': allowUndefined(stringFromJson)(`${name}.email`, value['email']),
        'password': allowUndefined(stringFromJson)(`${name}.password`, value['password']),
    };
    return result;
}
function modelApiDoctorSignRequestToJsonContent(name, value, knownKeys = {}) {
    if (typeof value !== 'object' || value === undefined || value === null) {
        throw `Invalid type for ${name}: expected object got ${typeof value}`;
    }
    ApiDoctorSignRequestKeys.forEach(k => knownKeys[k] = true);
    const result = {
        'email': allowUndefined(stringToJson)(`${name}.email`, value['email']),
        'password': allowUndefined(stringToJson)(`${name}.password`, value['password']),
    };
    return result;
}
function modelApiDoctorSignRequestFromJson(name, value) {
    const knownKeys = {};
    const result = modelApiDoctorSignRequestFromJsonContent(name, value, knownKeys);
    /* Known keys */
    // TODO if we don't ignore unknown properties
    for (const key of Object.keys(value)) {
        if (!knownKeys[key]) {
            // throw `Unexpected key: ${key}`
            console.warn(`Unexpected key in Api.DoctorSignRequest: ${key}`);
        }
    }
    return result;
}
exports.modelApiDoctorSignRequestFromJson = modelApiDoctorSignRequestFromJson;
function modelApiDoctorSignRequestToJson(name, value) {
    const knownKeys = {};
    const result = modelApiDoctorSignRequestToJsonContent(name, value, knownKeys);
    /* Known keys */
    // TODO if we don't ignore unknown properties
    for (const key of Object.keys(value)) {
        if (!knownKeys[key]) {
            // throw `Unexpected key: ${key}`
            console.warn(`Unexpected key in Api.DoctorSignRequest: ${key}`);
        }
    }
    return result;
}
exports.modelApiDoctorSignRequestToJson = modelApiDoctorSignRequestToJson;
const ApiGetDoctor404ResponseKeys = ['message'];
function modelApiGetDoctor404ResponseFromJsonContent(name, value, knownKeys = {}) {
    if (typeof value !== 'object' || value === undefined || value === null) {
        throw `Invalid type for ${name}: expected object got ${typeof value}`;
    }
    ApiGetDoctor404ResponseKeys.forEach(k => knownKeys[k] = true);
    const result = {
        'message': allowUndefined(stringFromJson)(`${name}.message`, value['message']),
    };
    return result;
}
function modelApiGetDoctor404ResponseToJsonContent(name, value, knownKeys = {}) {
    if (typeof value !== 'object' || value === undefined || value === null) {
        throw `Invalid type for ${name}: expected object got ${typeof value}`;
    }
    ApiGetDoctor404ResponseKeys.forEach(k => knownKeys[k] = true);
    const result = {
        'message': allowUndefined(stringToJson)(`${name}.message`, value['message']),
    };
    return result;
}
function modelApiGetDoctor404ResponseFromJson(name, value) {
    const knownKeys = {};
    const result = modelApiGetDoctor404ResponseFromJsonContent(name, value, knownKeys);
    /* Known keys */
    // TODO if we don't ignore unknown properties
    for (const key of Object.keys(value)) {
        if (!knownKeys[key]) {
            // throw `Unexpected key: ${key}`
            console.warn(`Unexpected key in Api.GetDoctor404Response: ${key}`);
        }
    }
    return result;
}
exports.modelApiGetDoctor404ResponseFromJson = modelApiGetDoctor404ResponseFromJson;
function modelApiGetDoctor404ResponseToJson(name, value) {
    const knownKeys = {};
    const result = modelApiGetDoctor404ResponseToJsonContent(name, value, knownKeys);
    /* Known keys */
    // TODO if we don't ignore unknown properties
    for (const key of Object.keys(value)) {
        if (!knownKeys[key]) {
            // throw `Unexpected key: ${key}`
            console.warn(`Unexpected key in Api.GetDoctor404Response: ${key}`);
        }
    }
    return result;
}
exports.modelApiGetDoctor404ResponseToJson = modelApiGetDoctor404ResponseToJson;
const ApiGetDoctor500ResponseKeys = ['message'];
function modelApiGetDoctor500ResponseFromJsonContent(name, value, knownKeys = {}) {
    if (typeof value !== 'object' || value === undefined || value === null) {
        throw `Invalid type for ${name}: expected object got ${typeof value}`;
    }
    ApiGetDoctor500ResponseKeys.forEach(k => knownKeys[k] = true);
    const result = {
        'message': allowUndefined(stringFromJson)(`${name}.message`, value['message']),
    };
    return result;
}
function modelApiGetDoctor500ResponseToJsonContent(name, value, knownKeys = {}) {
    if (typeof value !== 'object' || value === undefined || value === null) {
        throw `Invalid type for ${name}: expected object got ${typeof value}`;
    }
    ApiGetDoctor500ResponseKeys.forEach(k => knownKeys[k] = true);
    const result = {
        'message': allowUndefined(stringToJson)(`${name}.message`, value['message']),
    };
    return result;
}
function modelApiGetDoctor500ResponseFromJson(name, value) {
    const knownKeys = {};
    const result = modelApiGetDoctor500ResponseFromJsonContent(name, value, knownKeys);
    /* Known keys */
    // TODO if we don't ignore unknown properties
    for (const key of Object.keys(value)) {
        if (!knownKeys[key]) {
            // throw `Unexpected key: ${key}`
            console.warn(`Unexpected key in Api.GetDoctor500Response: ${key}`);
        }
    }
    return result;
}
exports.modelApiGetDoctor500ResponseFromJson = modelApiGetDoctor500ResponseFromJson;
function modelApiGetDoctor500ResponseToJson(name, value) {
    const knownKeys = {};
    const result = modelApiGetDoctor500ResponseToJsonContent(name, value, knownKeys);
    /* Known keys */
    // TODO if we don't ignore unknown properties
    for (const key of Object.keys(value)) {
        if (!knownKeys[key]) {
            // throw `Unexpected key: ${key}`
            console.warn(`Unexpected key in Api.GetDoctor500Response: ${key}`);
        }
    }
    return result;
}
exports.modelApiGetDoctor500ResponseToJson = modelApiGetDoctor500ResponseToJson;
const ApiGetDoctorDataKeys = ['id', 'name', 'email', 'mobile', 'address', 'specialization'];
function modelApiGetDoctorDataFromJsonContent(name, value, knownKeys = {}) {
    if (typeof value !== 'object' || value === undefined || value === null) {
        throw `Invalid type for ${name}: expected object got ${typeof value}`;
    }
    ApiGetDoctorDataKeys.forEach(k => knownKeys[k] = true);
    const result = {
        'id': allowUndefined(stringFromJson)(`${name}.id`, value['id']),
        'name': allowUndefined(stringFromJson)(`${name}.name`, value['name']),
        'email': allowUndefined(stringFromJson)(`${name}.email`, value['email']),
        'mobile': allowUndefined(stringFromJson)(`${name}.mobile`, value['mobile']),
        'address': allowUndefined(stringFromJson)(`${name}.address`, value['address']),
        'specialization': allowUndefined(stringFromJson)(`${name}.specialization`, value['specialization']),
    };
    return result;
}
function modelApiGetDoctorDataToJsonContent(name, value, knownKeys = {}) {
    if (typeof value !== 'object' || value === undefined || value === null) {
        throw `Invalid type for ${name}: expected object got ${typeof value}`;
    }
    ApiGetDoctorDataKeys.forEach(k => knownKeys[k] = true);
    const result = {
        'id': allowUndefined(stringToJson)(`${name}.id`, value['id']),
        'name': allowUndefined(stringToJson)(`${name}.name`, value['name']),
        'email': allowUndefined(stringToJson)(`${name}.email`, value['email']),
        'mobile': allowUndefined(stringToJson)(`${name}.mobile`, value['mobile']),
        'address': allowUndefined(stringToJson)(`${name}.address`, value['address']),
        'specialization': allowUndefined(stringToJson)(`${name}.specialization`, value['specialization']),
    };
    return result;
}
function modelApiGetDoctorDataFromJson(name, value) {
    const knownKeys = {};
    const result = modelApiGetDoctorDataFromJsonContent(name, value, knownKeys);
    /* Known keys */
    // TODO if we don't ignore unknown properties
    for (const key of Object.keys(value)) {
        if (!knownKeys[key]) {
            // throw `Unexpected key: ${key}`
            console.warn(`Unexpected key in Api.GetDoctorData: ${key}`);
        }
    }
    return result;
}
exports.modelApiGetDoctorDataFromJson = modelApiGetDoctorDataFromJson;
function modelApiGetDoctorDataToJson(name, value) {
    const knownKeys = {};
    const result = modelApiGetDoctorDataToJsonContent(name, value, knownKeys);
    /* Known keys */
    // TODO if we don't ignore unknown properties
    for (const key of Object.keys(value)) {
        if (!knownKeys[key]) {
            // throw `Unexpected key: ${key}`
            console.warn(`Unexpected key in Api.GetDoctorData: ${key}`);
        }
    }
    return result;
}
exports.modelApiGetDoctorDataToJson = modelApiGetDoctorDataToJson;
const ApiGetProfile200ResponseKeys = ['name', 'email', 'gender', 'mobile', 'address', 'age', 'medical_history'];
function modelApiGetProfile200ResponseFromJsonContent(name, value, knownKeys = {}) {
    if (typeof value !== 'object' || value === undefined || value === null) {
        throw `Invalid type for ${name}: expected object got ${typeof value}`;
    }
    ApiGetProfile200ResponseKeys.forEach(k => knownKeys[k] = true);
    const result = {
        'name': allowUndefined(stringFromJson)(`${name}.name`, value['name']),
        'email': allowUndefined(stringFromJson)(`${name}.email`, value['email']),
        'gender': allowUndefined(stringFromJson)(`${name}.gender`, value['gender']),
        'mobile': allowUndefined(stringFromJson)(`${name}.mobile`, value['mobile']),
        'address': allowUndefined(stringFromJson)(`${name}.address`, value['address']),
        'age': allowUndefined(numberFromJson)(`${name}.age`, value['age']),
        'medical_history': allowUndefined(stringFromJson)(`${name}.medical_history`, value['medical_history']),
    };
    return result;
}
function modelApiGetProfile200ResponseToJsonContent(name, value, knownKeys = {}) {
    if (typeof value !== 'object' || value === undefined || value === null) {
        throw `Invalid type for ${name}: expected object got ${typeof value}`;
    }
    ApiGetProfile200ResponseKeys.forEach(k => knownKeys[k] = true);
    const result = {
        'name': allowUndefined(stringToJson)(`${name}.name`, value['name']),
        'email': allowUndefined(stringToJson)(`${name}.email`, value['email']),
        'gender': allowUndefined(stringToJson)(`${name}.gender`, value['gender']),
        'mobile': allowUndefined(stringToJson)(`${name}.mobile`, value['mobile']),
        'address': allowUndefined(stringToJson)(`${name}.address`, value['address']),
        'age': allowUndefined(numberToJson)(`${name}.age`, value['age']),
        'medical_history': allowUndefined(stringToJson)(`${name}.medical_history`, value['medical_history']),
    };
    return result;
}
function modelApiGetProfile200ResponseFromJson(name, value) {
    const knownKeys = {};
    const result = modelApiGetProfile200ResponseFromJsonContent(name, value, knownKeys);
    /* Known keys */
    // TODO if we don't ignore unknown properties
    for (const key of Object.keys(value)) {
        if (!knownKeys[key]) {
            // throw `Unexpected key: ${key}`
            console.warn(`Unexpected key in Api.GetProfile200Response: ${key}`);
        }
    }
    return result;
}
exports.modelApiGetProfile200ResponseFromJson = modelApiGetProfile200ResponseFromJson;
function modelApiGetProfile200ResponseToJson(name, value) {
    const knownKeys = {};
    const result = modelApiGetProfile200ResponseToJsonContent(name, value, knownKeys);
    /* Known keys */
    // TODO if we don't ignore unknown properties
    for (const key of Object.keys(value)) {
        if (!knownKeys[key]) {
            // throw `Unexpected key: ${key}`
            console.warn(`Unexpected key in Api.GetProfile200Response: ${key}`);
        }
    }
    return result;
}
exports.modelApiGetProfile200ResponseToJson = modelApiGetProfile200ResponseToJson;
const ApiGetProfile404ResponseKeys = ['message'];
function modelApiGetProfile404ResponseFromJsonContent(name, value, knownKeys = {}) {
    if (typeof value !== 'object' || value === undefined || value === null) {
        throw `Invalid type for ${name}: expected object got ${typeof value}`;
    }
    ApiGetProfile404ResponseKeys.forEach(k => knownKeys[k] = true);
    const result = {
        'message': allowUndefined(stringFromJson)(`${name}.message`, value['message']),
    };
    return result;
}
function modelApiGetProfile404ResponseToJsonContent(name, value, knownKeys = {}) {
    if (typeof value !== 'object' || value === undefined || value === null) {
        throw `Invalid type for ${name}: expected object got ${typeof value}`;
    }
    ApiGetProfile404ResponseKeys.forEach(k => knownKeys[k] = true);
    const result = {
        'message': allowUndefined(stringToJson)(`${name}.message`, value['message']),
    };
    return result;
}
function modelApiGetProfile404ResponseFromJson(name, value) {
    const knownKeys = {};
    const result = modelApiGetProfile404ResponseFromJsonContent(name, value, knownKeys);
    /* Known keys */
    // TODO if we don't ignore unknown properties
    for (const key of Object.keys(value)) {
        if (!knownKeys[key]) {
            // throw `Unexpected key: ${key}`
            console.warn(`Unexpected key in Api.GetProfile404Response: ${key}`);
        }
    }
    return result;
}
exports.modelApiGetProfile404ResponseFromJson = modelApiGetProfile404ResponseFromJson;
function modelApiGetProfile404ResponseToJson(name, value) {
    const knownKeys = {};
    const result = modelApiGetProfile404ResponseToJsonContent(name, value, knownKeys);
    /* Known keys */
    // TODO if we don't ignore unknown properties
    for (const key of Object.keys(value)) {
        if (!knownKeys[key]) {
            // throw `Unexpected key: ${key}`
            console.warn(`Unexpected key in Api.GetProfile404Response: ${key}`);
        }
    }
    return result;
}
exports.modelApiGetProfile404ResponseToJson = modelApiGetProfile404ResponseToJson;
const ApiSignIn200ResponseKeys = ['email', 'id', 'token'];
function modelApiSignIn200ResponseFromJsonContent(name, value, knownKeys = {}) {
    if (typeof value !== 'object' || value === undefined || value === null) {
        throw `Invalid type for ${name}: expected object got ${typeof value}`;
    }
    ApiSignIn200ResponseKeys.forEach(k => knownKeys[k] = true);
    const result = {
        'email': allowUndefined(stringFromJson)(`${name}.email`, value['email']),
        'id': allowUndefined(stringFromJson)(`${name}.id`, value['id']),
        'token': allowUndefined(stringFromJson)(`${name}.token`, value['token']),
    };
    return result;
}
function modelApiSignIn200ResponseToJsonContent(name, value, knownKeys = {}) {
    if (typeof value !== 'object' || value === undefined || value === null) {
        throw `Invalid type for ${name}: expected object got ${typeof value}`;
    }
    ApiSignIn200ResponseKeys.forEach(k => knownKeys[k] = true);
    const result = {
        'email': allowUndefined(stringToJson)(`${name}.email`, value['email']),
        'id': allowUndefined(stringToJson)(`${name}.id`, value['id']),
        'token': allowUndefined(stringToJson)(`${name}.token`, value['token']),
    };
    return result;
}
function modelApiSignIn200ResponseFromJson(name, value) {
    const knownKeys = {};
    const result = modelApiSignIn200ResponseFromJsonContent(name, value, knownKeys);
    /* Known keys */
    // TODO if we don't ignore unknown properties
    for (const key of Object.keys(value)) {
        if (!knownKeys[key]) {
            // throw `Unexpected key: ${key}`
            console.warn(`Unexpected key in Api.SignIn200Response: ${key}`);
        }
    }
    return result;
}
exports.modelApiSignIn200ResponseFromJson = modelApiSignIn200ResponseFromJson;
function modelApiSignIn200ResponseToJson(name, value) {
    const knownKeys = {};
    const result = modelApiSignIn200ResponseToJsonContent(name, value, knownKeys);
    /* Known keys */
    // TODO if we don't ignore unknown properties
    for (const key of Object.keys(value)) {
        if (!knownKeys[key]) {
            // throw `Unexpected key: ${key}`
            console.warn(`Unexpected key in Api.SignIn200Response: ${key}`);
        }
    }
    return result;
}
exports.modelApiSignIn200ResponseToJson = modelApiSignIn200ResponseToJson;
const ApiSignIn404ResponseKeys = ['message'];
function modelApiSignIn404ResponseFromJsonContent(name, value, knownKeys = {}) {
    if (typeof value !== 'object' || value === undefined || value === null) {
        throw `Invalid type for ${name}: expected object got ${typeof value}`;
    }
    ApiSignIn404ResponseKeys.forEach(k => knownKeys[k] = true);
    const result = {
        'message': allowUndefined(stringFromJson)(`${name}.message`, value['message']),
    };
    return result;
}
function modelApiSignIn404ResponseToJsonContent(name, value, knownKeys = {}) {
    if (typeof value !== 'object' || value === undefined || value === null) {
        throw `Invalid type for ${name}: expected object got ${typeof value}`;
    }
    ApiSignIn404ResponseKeys.forEach(k => knownKeys[k] = true);
    const result = {
        'message': allowUndefined(stringToJson)(`${name}.message`, value['message']),
    };
    return result;
}
function modelApiSignIn404ResponseFromJson(name, value) {
    const knownKeys = {};
    const result = modelApiSignIn404ResponseFromJsonContent(name, value, knownKeys);
    /* Known keys */
    // TODO if we don't ignore unknown properties
    for (const key of Object.keys(value)) {
        if (!knownKeys[key]) {
            // throw `Unexpected key: ${key}`
            console.warn(`Unexpected key in Api.SignIn404Response: ${key}`);
        }
    }
    return result;
}
exports.modelApiSignIn404ResponseFromJson = modelApiSignIn404ResponseFromJson;
function modelApiSignIn404ResponseToJson(name, value) {
    const knownKeys = {};
    const result = modelApiSignIn404ResponseToJsonContent(name, value, knownKeys);
    /* Known keys */
    // TODO if we don't ignore unknown properties
    for (const key of Object.keys(value)) {
        if (!knownKeys[key]) {
            // throw `Unexpected key: ${key}`
            console.warn(`Unexpected key in Api.SignIn404Response: ${key}`);
        }
    }
    return result;
}
exports.modelApiSignIn404ResponseToJson = modelApiSignIn404ResponseToJson;
const ApiSignIn500ResponseKeys = ['message'];
function modelApiSignIn500ResponseFromJsonContent(name, value, knownKeys = {}) {
    if (typeof value !== 'object' || value === undefined || value === null) {
        throw `Invalid type for ${name}: expected object got ${typeof value}`;
    }
    ApiSignIn500ResponseKeys.forEach(k => knownKeys[k] = true);
    const result = {
        'message': allowUndefined(stringFromJson)(`${name}.message`, value['message']),
    };
    return result;
}
function modelApiSignIn500ResponseToJsonContent(name, value, knownKeys = {}) {
    if (typeof value !== 'object' || value === undefined || value === null) {
        throw `Invalid type for ${name}: expected object got ${typeof value}`;
    }
    ApiSignIn500ResponseKeys.forEach(k => knownKeys[k] = true);
    const result = {
        'message': allowUndefined(stringToJson)(`${name}.message`, value['message']),
    };
    return result;
}
function modelApiSignIn500ResponseFromJson(name, value) {
    const knownKeys = {};
    const result = modelApiSignIn500ResponseFromJsonContent(name, value, knownKeys);
    /* Known keys */
    // TODO if we don't ignore unknown properties
    for (const key of Object.keys(value)) {
        if (!knownKeys[key]) {
            // throw `Unexpected key: ${key}`
            console.warn(`Unexpected key in Api.SignIn500Response: ${key}`);
        }
    }
    return result;
}
exports.modelApiSignIn500ResponseFromJson = modelApiSignIn500ResponseFromJson;
function modelApiSignIn500ResponseToJson(name, value) {
    const knownKeys = {};
    const result = modelApiSignIn500ResponseToJsonContent(name, value, knownKeys);
    /* Known keys */
    // TODO if we don't ignore unknown properties
    for (const key of Object.keys(value)) {
        if (!knownKeys[key]) {
            // throw `Unexpected key: ${key}`
            console.warn(`Unexpected key in Api.SignIn500Response: ${key}`);
        }
    }
    return result;
}
exports.modelApiSignIn500ResponseToJson = modelApiSignIn500ResponseToJson;
const ApiSignInRequestKeys = ['email', 'password'];
function modelApiSignInRequestFromJsonContent(name, value, knownKeys = {}) {
    if (typeof value !== 'object' || value === undefined || value === null) {
        throw `Invalid type for ${name}: expected object got ${typeof value}`;
    }
    ApiSignInRequestKeys.forEach(k => knownKeys[k] = true);
    const result = {
        'email': allowUndefined(stringFromJson)(`${name}.email`, value['email']),
        'password': allowUndefined(stringFromJson)(`${name}.password`, value['password']),
    };
    return result;
}
function modelApiSignInRequestToJsonContent(name, value, knownKeys = {}) {
    if (typeof value !== 'object' || value === undefined || value === null) {
        throw `Invalid type for ${name}: expected object got ${typeof value}`;
    }
    ApiSignInRequestKeys.forEach(k => knownKeys[k] = true);
    const result = {
        'email': allowUndefined(stringToJson)(`${name}.email`, value['email']),
        'password': allowUndefined(stringToJson)(`${name}.password`, value['password']),
    };
    return result;
}
function modelApiSignInRequestFromJson(name, value) {
    const knownKeys = {};
    const result = modelApiSignInRequestFromJsonContent(name, value, knownKeys);
    /* Known keys */
    // TODO if we don't ignore unknown properties
    for (const key of Object.keys(value)) {
        if (!knownKeys[key]) {
            // throw `Unexpected key: ${key}`
            console.warn(`Unexpected key in Api.SignInRequest: ${key}`);
        }
    }
    return result;
}
exports.modelApiSignInRequestFromJson = modelApiSignInRequestFromJson;
function modelApiSignInRequestToJson(name, value) {
    const knownKeys = {};
    const result = modelApiSignInRequestToJsonContent(name, value, knownKeys);
    /* Known keys */
    // TODO if we don't ignore unknown properties
    for (const key of Object.keys(value)) {
        if (!knownKeys[key]) {
            // throw `Unexpected key: ${key}`
            console.warn(`Unexpected key in Api.SignInRequest: ${key}`);
        }
    }
    return result;
}
exports.modelApiSignInRequestToJson = modelApiSignInRequestToJson;
const ApiUpdatepatient200ResponseKeys = ['message'];
function modelApiUpdatepatient200ResponseFromJsonContent(name, value, knownKeys = {}) {
    if (typeof value !== 'object' || value === undefined || value === null) {
        throw `Invalid type for ${name}: expected object got ${typeof value}`;
    }
    ApiUpdatepatient200ResponseKeys.forEach(k => knownKeys[k] = true);
    const result = {
        'message': allowUndefined(stringFromJson)(`${name}.message`, value['message']),
    };
    return result;
}
function modelApiUpdatepatient200ResponseToJsonContent(name, value, knownKeys = {}) {
    if (typeof value !== 'object' || value === undefined || value === null) {
        throw `Invalid type for ${name}: expected object got ${typeof value}`;
    }
    ApiUpdatepatient200ResponseKeys.forEach(k => knownKeys[k] = true);
    const result = {
        'message': allowUndefined(stringToJson)(`${name}.message`, value['message']),
    };
    return result;
}
function modelApiUpdatepatient200ResponseFromJson(name, value) {
    const knownKeys = {};
    const result = modelApiUpdatepatient200ResponseFromJsonContent(name, value, knownKeys);
    /* Known keys */
    // TODO if we don't ignore unknown properties
    for (const key of Object.keys(value)) {
        if (!knownKeys[key]) {
            // throw `Unexpected key: ${key}`
            console.warn(`Unexpected key in Api.Updatepatient200Response: ${key}`);
        }
    }
    return result;
}
exports.modelApiUpdatepatient200ResponseFromJson = modelApiUpdatepatient200ResponseFromJson;
function modelApiUpdatepatient200ResponseToJson(name, value) {
    const knownKeys = {};
    const result = modelApiUpdatepatient200ResponseToJsonContent(name, value, knownKeys);
    /* Known keys */
    // TODO if we don't ignore unknown properties
    for (const key of Object.keys(value)) {
        if (!knownKeys[key]) {
            // throw `Unexpected key: ${key}`
            console.warn(`Unexpected key in Api.Updatepatient200Response: ${key}`);
        }
    }
    return result;
}
exports.modelApiUpdatepatient200ResponseToJson = modelApiUpdatepatient200ResponseToJson;
const ApiUpdatepatient404ResponseKeys = ['message'];
function modelApiUpdatepatient404ResponseFromJsonContent(name, value, knownKeys = {}) {
    if (typeof value !== 'object' || value === undefined || value === null) {
        throw `Invalid type for ${name}: expected object got ${typeof value}`;
    }
    ApiUpdatepatient404ResponseKeys.forEach(k => knownKeys[k] = true);
    const result = {
        'message': allowUndefined(stringFromJson)(`${name}.message`, value['message']),
    };
    return result;
}
function modelApiUpdatepatient404ResponseToJsonContent(name, value, knownKeys = {}) {
    if (typeof value !== 'object' || value === undefined || value === null) {
        throw `Invalid type for ${name}: expected object got ${typeof value}`;
    }
    ApiUpdatepatient404ResponseKeys.forEach(k => knownKeys[k] = true);
    const result = {
        'message': allowUndefined(stringToJson)(`${name}.message`, value['message']),
    };
    return result;
}
function modelApiUpdatepatient404ResponseFromJson(name, value) {
    const knownKeys = {};
    const result = modelApiUpdatepatient404ResponseFromJsonContent(name, value, knownKeys);
    /* Known keys */
    // TODO if we don't ignore unknown properties
    for (const key of Object.keys(value)) {
        if (!knownKeys[key]) {
            // throw `Unexpected key: ${key}`
            console.warn(`Unexpected key in Api.Updatepatient404Response: ${key}`);
        }
    }
    return result;
}
exports.modelApiUpdatepatient404ResponseFromJson = modelApiUpdatepatient404ResponseFromJson;
function modelApiUpdatepatient404ResponseToJson(name, value) {
    const knownKeys = {};
    const result = modelApiUpdatepatient404ResponseToJsonContent(name, value, knownKeys);
    /* Known keys */
    // TODO if we don't ignore unknown properties
    for (const key of Object.keys(value)) {
        if (!knownKeys[key]) {
            // throw `Unexpected key: ${key}`
            console.warn(`Unexpected key in Api.Updatepatient404Response: ${key}`);
        }
    }
    return result;
}
exports.modelApiUpdatepatient404ResponseToJson = modelApiUpdatepatient404ResponseToJson;
