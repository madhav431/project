/* eslint-disable */
// tslint:disable
/**
 * Hospital Management Service
 * 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator+.
 * https://github.com/karlvr/openapi-generator-plus
 * Do not edit the class manually.
 */

import { Express } from 'express'
import { Api } from './models'

type FromJsonFunction<T> = (name: string, value: any) => T
type MapOf<T> = { [name: string]: T }

/**
 * A conditional type to convert an interface model to the equivalent JSON model.
 * We may represent dates as Date objects in our object model, but we must translate
 * them to strings for the JSON model.
 */
type ToJson<T> =
	T extends Date ? string
	: T extends object ? {
		[P in keyof T]: ToJson<T[P]>
	}
	: T extends (infer R)[] ? ToJson<R>[]
	: T

export function arrayFromJson<T>(next: FromJsonFunction<T>): FromJsonFunction<T[]> {
	return function(name: string, value: any) {
		if (typeof value !== 'object' || typeof value.length !== 'number') {
			throw `Invalid type for ${name}: expected array got ${typeof value}`
		}
	
		const result: T[] = []
		for (const el of value) {
			result.push(next(name, el))
		}
		return result
	}
}

export function arrayToJson<T>(next: FromJsonFunction<T>): FromJsonFunction<T[]> {
	return arrayFromJson(next)
}

export function mapFromJson<T>(next: FromJsonFunction<T>): FromJsonFunction<MapOf<T>> {
	return function(name: string, value: any) {
		if (typeof value !== 'object') {
			throw `Invalid type for ${name}: expected object got ${typeof value}`
		}
	
		const result: MapOf<T> = {}
		for (const key in value) {
			if (value.hasOwnProperty(key)) {
				result[key] = next(name, value[key])
			}
		}
		return result
	}
}

export function mapToJson<T>(next: FromJsonFunction<T>): FromJsonFunction<MapOf<T>> {
	return mapFromJson(next)
}

export function allowNull<T>(next: FromJsonFunction<T>): FromJsonFunction<T | null> {
	return function(name: string, value: any) {
		if (value === null) {
			return null
		}
		return next(name, value)
	}
}

export function allowUndefined<T>(next: FromJsonFunction<T>): FromJsonFunction<T | undefined> {
	return function(name: string, value: any) {
		if (value === undefined) {
			return undefined
		}
		return next(name, value)
	}
}

export function allowNullOrUndefined<T>(next: FromJsonFunction<T>): FromJsonFunction<T | null | undefined> {
	return function(name: string, value: any) {
		if (value === null) {
			return null
		}
		if (value === undefined) {
			return undefined
		}
		return next(name, value)
	}
}

export function unsupportedFromJson(name: string, value: any): unknown {
	if (value === undefined) {
		throw `Invalid type for ${name}: expected unknown got undefined`
	}
	return value
}

export function unsupportedToJson(name: string, value: unknown): any {
	return unsupportedFromJson(name, value)
}

export function parseUnsupported(name: string, value: any): unknown {
	if (value === undefined) {
		throw `Invalid value for ${name}: expected unknown got undefined`
	}
	return value
}

export function booleanFromJson(name: string, value: any): boolean {
	if (typeof value !== 'boolean') {
		throw `Invalid type for ${name}: expected boolean got ${typeof value}`
	}
	return value
}

export function booleanToJson(name: string, value: boolean): any {
	return booleanFromJson(name, value)
}

export function parseBoolean(name: string, value: any): boolean {
	if (value === 'true') {
		return true
	} else if (value === 'false') {
		return false
	} else {
		throw `Invalid value for ${name}: expected boolean got "${value}"`
	}
}

export function stringFromJson(name: string, value: any): string {
	if (typeof value !== 'string') {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}
	return value
}

export function stringToJson(name: string, value: string): any {
	return stringFromJson(name, value)
}

export function binaryFromJson(name: string, value: any): Buffer {
	if (typeof value !== 'string') {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}
	return new Buffer(value, 'base64')
}

export function binaryToJson(name: string, value: string | Buffer): string {
	if (typeof value === 'string') {
		return value
	} else {
		return value.toString('base64')
	}
}

export function parseString(name: string, value: any): string {
	if (value === undefined) {
		throw `Invalid value for ${name}: expected string got undefined`
	}
	if (typeof value === 'string') {
		return value
	}
	if (typeof value === 'object' && typeof value.length === 'number') {
		if (value.length > 0) {
			return value[0]
		}
	}

	throw `Invalid value for ${name}: expected string got ${typeof value}`
}

export function integerFromJson(name: string, value: any): number {
	if (typeof value !== 'number') {
		throw `Invalid type for ${name}: expected number got ${typeof value}`
	}
	if (isNaN(value)) {
		throw `Invalid NaN for ${name}`
	}
	if (Math.floor(value) !== value) {
		throw `Invalid value for ${name}: expected integer got "${value}"`
	}
	return value
}

export function integerToJson(name: string, value: number): any {
	return integerFromJson(name, value)
}

export function parseInteger(name: string, value: any): number {
	if (typeof value === 'object' && typeof value.length === 'number' && value.length > 0) {
		value = value[0]
	}
	if (typeof value === 'string') {
		if (value.indexOf('.') !== -1) {
			throw `Invalid value for ${name}: expected integer got "${value}"`
		}

		const result = parseInt(value, 10)
		if (isNaN(result)) {
			throw `Invalid value for ${name}: expected integer got "${value}"`
		}
		return result
	}
	throw `Invalid value for ${name}: expected integer got ${typeof value}`
}

export function numberFromJson(name: string, value: any): number {
	if (typeof value !== 'number') {
		throw `Invalid type for ${name}: expected number got ${typeof value}`
	}
	if (isNaN(value)) {
		throw `Invalid NaN for ${name}`
	}
	return value
}

export function numberToJson(name: string, value: number): any {
	return numberFromJson(name, value)
}

export function parseNumber(name: string, value: any): number {
	if (typeof value === 'object' && typeof value.length === 'number' && value.length > 0) {
		value = value[0]
	}
	if (typeof value === 'string') {
		const result = parseFloat(value)
		if (isNaN(result)) {
			throw `Invalid value for ${name}: expected float got "${value}"`
		}
		return result
	}
	throw `Invalid value for ${name}: expected number got ${typeof value}`
}

export function dateFromJson(name: string, value: any): string {
	if (typeof value !== 'string') {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}
	if (!value.match(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)) {
		throw `Invalid value for ${name}: expected valid date string got "${value}"`
	}
	return value
}

export function parseDate(name: string, value: any): string {
	return dateFromJson(name, value)
}

export function dateToJson(name: string, value: string): string {
	return dateFromJson(name, value)
}

export function dateTimeFromJson(name: string, value: any): Date {
	if (typeof value !== 'string') {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}
	if (!value.match(/^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}(:[0-9]{2}(\.[0-9]+)?)?(Z|(\+|-)[0-9]{2}(:?[0-9]{2})?)$/)) {
		throw `Invalid value for ${name}: expected valid datetime string got "${value}"`
	}
	return new Date(value)
}

export function parseDateTime(name: string, value: any): Date {
	return dateTimeFromJson(name, value)
}

export function dateTimeToJson(name: string, value: Date): string {
	if (typeof value !== 'object' || typeof value.toISOString !== 'function') {
		throw `Invalid type for ${name}: expected Date got ${typeof value}`
	}
	return value.toISOString()
}

export function timeFromJson(name: string, value: any): string {
	if (typeof value !== 'string') {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}
	if (!value.match(/^[0-9]{2}:[0-9]{2}(:[0-9]{2}(\.[0-9]+)?)?$/)) {
		throw `Invalid value for ${name}: expected valid time string got "${value}"`
	}
	return value
}

export function parseTime(name: string, value: any): string {
	return timeFromJson(name, value)
}

export function timeToJson(name: string, value: string): string {
	return timeFromJson(name, value)
}

/* Model conversion functions */

const ApiCreateAppointmentKeys: string[] = ['patient_id', 'doctor_id', 'appointment_date', 'appointment_time']

function modelApiCreateAppointmentFromJsonContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CreateAppointment {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCreateAppointmentKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CreateAppointment = {
		'patient_id': allowUndefined(stringFromJson)(`${name}.patient_id`, value['patient_id']),
		'doctor_id': allowUndefined(stringFromJson)(`${name}.doctor_id`, value['doctor_id']),
		'appointment_date': allowUndefined(stringFromJson)(`${name}.appointment_date`, value['appointment_date']),
		'appointment_time': allowUndefined(stringFromJson)(`${name}.appointment_time`, value['appointment_time']),
	}

	return result
}

function modelApiCreateAppointmentToJsonContent(name: string, value: Api.CreateAppointment, knownKeys: Record<string, boolean> = {}): ToJson<Api.CreateAppointment> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCreateAppointmentKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToJson<Api.CreateAppointment> = {
		'patient_id': allowUndefined(stringToJson)(`${name}.patient_id`, value['patient_id']),
		'doctor_id': allowUndefined(stringToJson)(`${name}.doctor_id`, value['doctor_id']),
		'appointment_date': allowUndefined(stringToJson)(`${name}.appointment_date`, value['appointment_date']),
		'appointment_time': allowUndefined(stringToJson)(`${name}.appointment_time`, value['appointment_time']),
	}

	return result
}

export function modelApiCreateAppointmentFromJson(name: string, value: any): Api.CreateAppointment {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CreateAppointment = modelApiCreateAppointmentFromJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.CreateAppointment: ${key}`)
		}
	}

	return result
}

export function modelApiCreateAppointmentToJson(name: string, value: Api.CreateAppointment): ToJson<Api.CreateAppointment> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToJson<Api.CreateAppointment> = modelApiCreateAppointmentToJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.CreateAppointment: ${key}`)
		}
	}

	return result
}

const ApiCreateAppointment201ResponseKeys: string[] = ['message']

function modelApiCreateAppointment201ResponseFromJsonContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CreateAppointment201Response {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCreateAppointment201ResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CreateAppointment201Response = {
		'message': allowUndefined(stringFromJson)(`${name}.message`, value['message']),
	}

	return result
}

function modelApiCreateAppointment201ResponseToJsonContent(name: string, value: Api.CreateAppointment201Response, knownKeys: Record<string, boolean> = {}): ToJson<Api.CreateAppointment201Response> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCreateAppointment201ResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToJson<Api.CreateAppointment201Response> = {
		'message': allowUndefined(stringToJson)(`${name}.message`, value['message']),
	}

	return result
}

export function modelApiCreateAppointment201ResponseFromJson(name: string, value: any): Api.CreateAppointment201Response {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CreateAppointment201Response = modelApiCreateAppointment201ResponseFromJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.CreateAppointment201Response: ${key}`)
		}
	}

	return result
}

export function modelApiCreateAppointment201ResponseToJson(name: string, value: Api.CreateAppointment201Response): ToJson<Api.CreateAppointment201Response> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToJson<Api.CreateAppointment201Response> = modelApiCreateAppointment201ResponseToJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.CreateAppointment201Response: ${key}`)
		}
	}

	return result
}

const ApiCreateAppointment404ResponseKeys: string[] = ['message']

function modelApiCreateAppointment404ResponseFromJsonContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CreateAppointment404Response {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCreateAppointment404ResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CreateAppointment404Response = {
		'message': allowUndefined(stringFromJson)(`${name}.message`, value['message']),
	}

	return result
}

function modelApiCreateAppointment404ResponseToJsonContent(name: string, value: Api.CreateAppointment404Response, knownKeys: Record<string, boolean> = {}): ToJson<Api.CreateAppointment404Response> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCreateAppointment404ResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToJson<Api.CreateAppointment404Response> = {
		'message': allowUndefined(stringToJson)(`${name}.message`, value['message']),
	}

	return result
}

export function modelApiCreateAppointment404ResponseFromJson(name: string, value: any): Api.CreateAppointment404Response {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CreateAppointment404Response = modelApiCreateAppointment404ResponseFromJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.CreateAppointment404Response: ${key}`)
		}
	}

	return result
}

export function modelApiCreateAppointment404ResponseToJson(name: string, value: Api.CreateAppointment404Response): ToJson<Api.CreateAppointment404Response> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToJson<Api.CreateAppointment404Response> = modelApiCreateAppointment404ResponseToJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.CreateAppointment404Response: ${key}`)
		}
	}

	return result
}

const ApiCreateAppointment500ResponseKeys: string[] = ['message']

function modelApiCreateAppointment500ResponseFromJsonContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CreateAppointment500Response {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCreateAppointment500ResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CreateAppointment500Response = {
		'message': allowUndefined(stringFromJson)(`${name}.message`, value['message']),
	}

	return result
}

function modelApiCreateAppointment500ResponseToJsonContent(name: string, value: Api.CreateAppointment500Response, knownKeys: Record<string, boolean> = {}): ToJson<Api.CreateAppointment500Response> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCreateAppointment500ResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToJson<Api.CreateAppointment500Response> = {
		'message': allowUndefined(stringToJson)(`${name}.message`, value['message']),
	}

	return result
}

export function modelApiCreateAppointment500ResponseFromJson(name: string, value: any): Api.CreateAppointment500Response {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CreateAppointment500Response = modelApiCreateAppointment500ResponseFromJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.CreateAppointment500Response: ${key}`)
		}
	}

	return result
}

export function modelApiCreateAppointment500ResponseToJson(name: string, value: Api.CreateAppointment500Response): ToJson<Api.CreateAppointment500Response> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToJson<Api.CreateAppointment500Response> = modelApiCreateAppointment500ResponseToJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.CreateAppointment500Response: ${key}`)
		}
	}

	return result
}

const ApiCreateDoctorKeys: string[] = ['name', 'email', 'password', 'address', 'mobile', 'specialization']

function modelApiCreateDoctorFromJsonContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CreateDoctor {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCreateDoctorKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CreateDoctor = {
		'name': allowUndefined(stringFromJson)(`${name}.name`, value['name']),
		'email': allowUndefined(stringFromJson)(`${name}.email`, value['email']),
		'password': allowUndefined(stringFromJson)(`${name}.password`, value['password']),
		'address': allowUndefined(stringFromJson)(`${name}.address`, value['address']),
		'mobile': allowUndefined(stringFromJson)(`${name}.mobile`, value['mobile']),
		'specialization': allowUndefined(stringFromJson)(`${name}.specialization`, value['specialization']),
	}

	return result
}

function modelApiCreateDoctorToJsonContent(name: string, value: Api.CreateDoctor, knownKeys: Record<string, boolean> = {}): ToJson<Api.CreateDoctor> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCreateDoctorKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToJson<Api.CreateDoctor> = {
		'name': allowUndefined(stringToJson)(`${name}.name`, value['name']),
		'email': allowUndefined(stringToJson)(`${name}.email`, value['email']),
		'password': allowUndefined(stringToJson)(`${name}.password`, value['password']),
		'address': allowUndefined(stringToJson)(`${name}.address`, value['address']),
		'mobile': allowUndefined(stringToJson)(`${name}.mobile`, value['mobile']),
		'specialization': allowUndefined(stringToJson)(`${name}.specialization`, value['specialization']),
	}

	return result
}

export function modelApiCreateDoctorFromJson(name: string, value: any): Api.CreateDoctor {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CreateDoctor = modelApiCreateDoctorFromJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.CreateDoctor: ${key}`)
		}
	}

	return result
}

export function modelApiCreateDoctorToJson(name: string, value: Api.CreateDoctor): ToJson<Api.CreateDoctor> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToJson<Api.CreateDoctor> = modelApiCreateDoctorToJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.CreateDoctor: ${key}`)
		}
	}

	return result
}

const ApiCreateDoctor201ResponseKeys: string[] = ['message']

function modelApiCreateDoctor201ResponseFromJsonContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CreateDoctor201Response {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCreateDoctor201ResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CreateDoctor201Response = {
		'message': allowUndefined(stringFromJson)(`${name}.message`, value['message']),
	}

	return result
}

function modelApiCreateDoctor201ResponseToJsonContent(name: string, value: Api.CreateDoctor201Response, knownKeys: Record<string, boolean> = {}): ToJson<Api.CreateDoctor201Response> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCreateDoctor201ResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToJson<Api.CreateDoctor201Response> = {
		'message': allowUndefined(stringToJson)(`${name}.message`, value['message']),
	}

	return result
}

export function modelApiCreateDoctor201ResponseFromJson(name: string, value: any): Api.CreateDoctor201Response {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CreateDoctor201Response = modelApiCreateDoctor201ResponseFromJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.CreateDoctor201Response: ${key}`)
		}
	}

	return result
}

export function modelApiCreateDoctor201ResponseToJson(name: string, value: Api.CreateDoctor201Response): ToJson<Api.CreateDoctor201Response> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToJson<Api.CreateDoctor201Response> = modelApiCreateDoctor201ResponseToJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.CreateDoctor201Response: ${key}`)
		}
	}

	return result
}

const ApiCreateDoctor404ResponseKeys: string[] = ['message']

function modelApiCreateDoctor404ResponseFromJsonContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CreateDoctor404Response {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCreateDoctor404ResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CreateDoctor404Response = {
		'message': allowUndefined(stringFromJson)(`${name}.message`, value['message']),
	}

	return result
}

function modelApiCreateDoctor404ResponseToJsonContent(name: string, value: Api.CreateDoctor404Response, knownKeys: Record<string, boolean> = {}): ToJson<Api.CreateDoctor404Response> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCreateDoctor404ResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToJson<Api.CreateDoctor404Response> = {
		'message': allowUndefined(stringToJson)(`${name}.message`, value['message']),
	}

	return result
}

export function modelApiCreateDoctor404ResponseFromJson(name: string, value: any): Api.CreateDoctor404Response {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CreateDoctor404Response = modelApiCreateDoctor404ResponseFromJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.CreateDoctor404Response: ${key}`)
		}
	}

	return result
}

export function modelApiCreateDoctor404ResponseToJson(name: string, value: Api.CreateDoctor404Response): ToJson<Api.CreateDoctor404Response> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToJson<Api.CreateDoctor404Response> = modelApiCreateDoctor404ResponseToJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.CreateDoctor404Response: ${key}`)
		}
	}

	return result
}

const ApiCreateUserKeys: string[] = ['name', 'email', 'password', 'gender', 'mobile', 'address', 'age', 'medical_history']

function modelApiCreateUserFromJsonContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CreateUser {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCreateUserKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CreateUser = {
		'name': allowUndefined(stringFromJson)(`${name}.name`, value['name']),
		'email': allowUndefined(stringFromJson)(`${name}.email`, value['email']),
		'password': allowUndefined(stringFromJson)(`${name}.password`, value['password']),
		'gender': allowUndefined(stringFromJson)(`${name}.gender`, value['gender']),
		'mobile': allowUndefined(stringFromJson)(`${name}.mobile`, value['mobile']),
		'address': allowUndefined(stringFromJson)(`${name}.address`, value['address']),
		'age': allowUndefined(numberFromJson)(`${name}.age`, value['age']),
		'medical_history': allowUndefined(stringFromJson)(`${name}.medical_history`, value['medical_history']),
	}

	return result
}

function modelApiCreateUserToJsonContent(name: string, value: Api.CreateUser, knownKeys: Record<string, boolean> = {}): ToJson<Api.CreateUser> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCreateUserKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToJson<Api.CreateUser> = {
		'name': allowUndefined(stringToJson)(`${name}.name`, value['name']),
		'email': allowUndefined(stringToJson)(`${name}.email`, value['email']),
		'password': allowUndefined(stringToJson)(`${name}.password`, value['password']),
		'gender': allowUndefined(stringToJson)(`${name}.gender`, value['gender']),
		'mobile': allowUndefined(stringToJson)(`${name}.mobile`, value['mobile']),
		'address': allowUndefined(stringToJson)(`${name}.address`, value['address']),
		'age': allowUndefined(numberToJson)(`${name}.age`, value['age']),
		'medical_history': allowUndefined(stringToJson)(`${name}.medical_history`, value['medical_history']),
	}

	return result
}

export function modelApiCreateUserFromJson(name: string, value: any): Api.CreateUser {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CreateUser = modelApiCreateUserFromJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.CreateUser: ${key}`)
		}
	}

	return result
}

export function modelApiCreateUserToJson(name: string, value: Api.CreateUser): ToJson<Api.CreateUser> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToJson<Api.CreateUser> = modelApiCreateUserToJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.CreateUser: ${key}`)
		}
	}

	return result
}

const ApiCreateUser201ResponseKeys: string[] = ['message']

function modelApiCreateUser201ResponseFromJsonContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CreateUser201Response {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCreateUser201ResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CreateUser201Response = {
		'message': allowUndefined(stringFromJson)(`${name}.message`, value['message']),
	}

	return result
}

function modelApiCreateUser201ResponseToJsonContent(name: string, value: Api.CreateUser201Response, knownKeys: Record<string, boolean> = {}): ToJson<Api.CreateUser201Response> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCreateUser201ResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToJson<Api.CreateUser201Response> = {
		'message': allowUndefined(stringToJson)(`${name}.message`, value['message']),
	}

	return result
}

export function modelApiCreateUser201ResponseFromJson(name: string, value: any): Api.CreateUser201Response {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CreateUser201Response = modelApiCreateUser201ResponseFromJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.CreateUser201Response: ${key}`)
		}
	}

	return result
}

export function modelApiCreateUser201ResponseToJson(name: string, value: Api.CreateUser201Response): ToJson<Api.CreateUser201Response> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToJson<Api.CreateUser201Response> = modelApiCreateUser201ResponseToJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.CreateUser201Response: ${key}`)
		}
	}

	return result
}

const ApiCreateUser404ResponseKeys: string[] = ['message']

function modelApiCreateUser404ResponseFromJsonContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CreateUser404Response {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCreateUser404ResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CreateUser404Response = {
		'message': allowUndefined(stringFromJson)(`${name}.message`, value['message']),
	}

	return result
}

function modelApiCreateUser404ResponseToJsonContent(name: string, value: Api.CreateUser404Response, knownKeys: Record<string, boolean> = {}): ToJson<Api.CreateUser404Response> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCreateUser404ResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToJson<Api.CreateUser404Response> = {
		'message': allowUndefined(stringToJson)(`${name}.message`, value['message']),
	}

	return result
}

export function modelApiCreateUser404ResponseFromJson(name: string, value: any): Api.CreateUser404Response {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CreateUser404Response = modelApiCreateUser404ResponseFromJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.CreateUser404Response: ${key}`)
		}
	}

	return result
}

export function modelApiCreateUser404ResponseToJson(name: string, value: Api.CreateUser404Response): ToJson<Api.CreateUser404Response> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToJson<Api.CreateUser404Response> = modelApiCreateUser404ResponseToJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.CreateUser404Response: ${key}`)
		}
	}

	return result
}

const ApiDoctorSign200ResponseKeys: string[] = ['id', 'email', 'name', 'mobile', 'specialization']

function modelApiDoctorSign200ResponseFromJsonContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.DoctorSign200Response {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiDoctorSign200ResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.DoctorSign200Response = {
		'id': allowUndefined(stringFromJson)(`${name}.id`, value['id']),
		'email': allowUndefined(stringFromJson)(`${name}.email`, value['email']),
		'name': allowUndefined(stringFromJson)(`${name}.name`, value['name']),
		'mobile': allowUndefined(stringFromJson)(`${name}.mobile`, value['mobile']),
		'specialization': allowUndefined(stringFromJson)(`${name}.specialization`, value['specialization']),
	}

	return result
}

function modelApiDoctorSign200ResponseToJsonContent(name: string, value: Api.DoctorSign200Response, knownKeys: Record<string, boolean> = {}): ToJson<Api.DoctorSign200Response> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiDoctorSign200ResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToJson<Api.DoctorSign200Response> = {
		'id': allowUndefined(stringToJson)(`${name}.id`, value['id']),
		'email': allowUndefined(stringToJson)(`${name}.email`, value['email']),
		'name': allowUndefined(stringToJson)(`${name}.name`, value['name']),
		'mobile': allowUndefined(stringToJson)(`${name}.mobile`, value['mobile']),
		'specialization': allowUndefined(stringToJson)(`${name}.specialization`, value['specialization']),
	}

	return result
}

export function modelApiDoctorSign200ResponseFromJson(name: string, value: any): Api.DoctorSign200Response {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.DoctorSign200Response = modelApiDoctorSign200ResponseFromJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.DoctorSign200Response: ${key}`)
		}
	}

	return result
}

export function modelApiDoctorSign200ResponseToJson(name: string, value: Api.DoctorSign200Response): ToJson<Api.DoctorSign200Response> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToJson<Api.DoctorSign200Response> = modelApiDoctorSign200ResponseToJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.DoctorSign200Response: ${key}`)
		}
	}

	return result
}

const ApiDoctorSign404ResponseKeys: string[] = ['message']

function modelApiDoctorSign404ResponseFromJsonContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.DoctorSign404Response {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiDoctorSign404ResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.DoctorSign404Response = {
		'message': allowUndefined(stringFromJson)(`${name}.message`, value['message']),
	}

	return result
}

function modelApiDoctorSign404ResponseToJsonContent(name: string, value: Api.DoctorSign404Response, knownKeys: Record<string, boolean> = {}): ToJson<Api.DoctorSign404Response> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiDoctorSign404ResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToJson<Api.DoctorSign404Response> = {
		'message': allowUndefined(stringToJson)(`${name}.message`, value['message']),
	}

	return result
}

export function modelApiDoctorSign404ResponseFromJson(name: string, value: any): Api.DoctorSign404Response {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.DoctorSign404Response = modelApiDoctorSign404ResponseFromJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.DoctorSign404Response: ${key}`)
		}
	}

	return result
}

export function modelApiDoctorSign404ResponseToJson(name: string, value: Api.DoctorSign404Response): ToJson<Api.DoctorSign404Response> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToJson<Api.DoctorSign404Response> = modelApiDoctorSign404ResponseToJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.DoctorSign404Response: ${key}`)
		}
	}

	return result
}

const ApiDoctorSign500ResponseKeys: string[] = []

function modelApiDoctorSign500ResponseFromJsonContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.DoctorSign500Response {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiDoctorSign500ResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.DoctorSign500Response = {
	}

	return result
}

function modelApiDoctorSign500ResponseToJsonContent(name: string, value: Api.DoctorSign500Response, knownKeys: Record<string, boolean> = {}): ToJson<Api.DoctorSign500Response> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiDoctorSign500ResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToJson<Api.DoctorSign500Response> = {
	}

	return result
}

export function modelApiDoctorSign500ResponseFromJson(name: string, value: any): Api.DoctorSign500Response {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.DoctorSign500Response = modelApiDoctorSign500ResponseFromJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.DoctorSign500Response: ${key}`)
		}
	}

	return result
}

export function modelApiDoctorSign500ResponseToJson(name: string, value: Api.DoctorSign500Response): ToJson<Api.DoctorSign500Response> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToJson<Api.DoctorSign500Response> = modelApiDoctorSign500ResponseToJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.DoctorSign500Response: ${key}`)
		}
	}

	return result
}

const ApiDoctorSignRequestKeys: string[] = ['email', 'password']

function modelApiDoctorSignRequestFromJsonContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.DoctorSignRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiDoctorSignRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.DoctorSignRequest = {
		'email': allowUndefined(stringFromJson)(`${name}.email`, value['email']),
		'password': allowUndefined(stringFromJson)(`${name}.password`, value['password']),
	}

	return result
}

function modelApiDoctorSignRequestToJsonContent(name: string, value: Api.DoctorSignRequest, knownKeys: Record<string, boolean> = {}): ToJson<Api.DoctorSignRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiDoctorSignRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToJson<Api.DoctorSignRequest> = {
		'email': allowUndefined(stringToJson)(`${name}.email`, value['email']),
		'password': allowUndefined(stringToJson)(`${name}.password`, value['password']),
	}

	return result
}

export function modelApiDoctorSignRequestFromJson(name: string, value: any): Api.DoctorSignRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.DoctorSignRequest = modelApiDoctorSignRequestFromJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.DoctorSignRequest: ${key}`)
		}
	}

	return result
}

export function modelApiDoctorSignRequestToJson(name: string, value: Api.DoctorSignRequest): ToJson<Api.DoctorSignRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToJson<Api.DoctorSignRequest> = modelApiDoctorSignRequestToJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.DoctorSignRequest: ${key}`)
		}
	}

	return result
}

const ApiGetDoctor404ResponseKeys: string[] = ['message']

function modelApiGetDoctor404ResponseFromJsonContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.GetDoctor404Response {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiGetDoctor404ResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.GetDoctor404Response = {
		'message': allowUndefined(stringFromJson)(`${name}.message`, value['message']),
	}

	return result
}

function modelApiGetDoctor404ResponseToJsonContent(name: string, value: Api.GetDoctor404Response, knownKeys: Record<string, boolean> = {}): ToJson<Api.GetDoctor404Response> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiGetDoctor404ResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToJson<Api.GetDoctor404Response> = {
		'message': allowUndefined(stringToJson)(`${name}.message`, value['message']),
	}

	return result
}

export function modelApiGetDoctor404ResponseFromJson(name: string, value: any): Api.GetDoctor404Response {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.GetDoctor404Response = modelApiGetDoctor404ResponseFromJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.GetDoctor404Response: ${key}`)
		}
	}

	return result
}

export function modelApiGetDoctor404ResponseToJson(name: string, value: Api.GetDoctor404Response): ToJson<Api.GetDoctor404Response> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToJson<Api.GetDoctor404Response> = modelApiGetDoctor404ResponseToJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.GetDoctor404Response: ${key}`)
		}
	}

	return result
}

const ApiGetDoctor500ResponseKeys: string[] = ['message']

function modelApiGetDoctor500ResponseFromJsonContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.GetDoctor500Response {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiGetDoctor500ResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.GetDoctor500Response = {
		'message': allowUndefined(stringFromJson)(`${name}.message`, value['message']),
	}

	return result
}

function modelApiGetDoctor500ResponseToJsonContent(name: string, value: Api.GetDoctor500Response, knownKeys: Record<string, boolean> = {}): ToJson<Api.GetDoctor500Response> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiGetDoctor500ResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToJson<Api.GetDoctor500Response> = {
		'message': allowUndefined(stringToJson)(`${name}.message`, value['message']),
	}

	return result
}

export function modelApiGetDoctor500ResponseFromJson(name: string, value: any): Api.GetDoctor500Response {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.GetDoctor500Response = modelApiGetDoctor500ResponseFromJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.GetDoctor500Response: ${key}`)
		}
	}

	return result
}

export function modelApiGetDoctor500ResponseToJson(name: string, value: Api.GetDoctor500Response): ToJson<Api.GetDoctor500Response> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToJson<Api.GetDoctor500Response> = modelApiGetDoctor500ResponseToJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.GetDoctor500Response: ${key}`)
		}
	}

	return result
}

const ApiGetDoctorDataKeys: string[] = ['id', 'name', 'email', 'mobile', 'address', 'specialization']

function modelApiGetDoctorDataFromJsonContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.GetDoctorData {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiGetDoctorDataKeys.forEach(k => knownKeys[k] = true)

	const result: Api.GetDoctorData = {
		'id': allowUndefined(stringFromJson)(`${name}.id`, value['id']),
		'name': allowUndefined(stringFromJson)(`${name}.name`, value['name']),
		'email': allowUndefined(stringFromJson)(`${name}.email`, value['email']),
		'mobile': allowUndefined(stringFromJson)(`${name}.mobile`, value['mobile']),
		'address': allowUndefined(stringFromJson)(`${name}.address`, value['address']),
		'specialization': allowUndefined(stringFromJson)(`${name}.specialization`, value['specialization']),
	}

	return result
}

function modelApiGetDoctorDataToJsonContent(name: string, value: Api.GetDoctorData, knownKeys: Record<string, boolean> = {}): ToJson<Api.GetDoctorData> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiGetDoctorDataKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToJson<Api.GetDoctorData> = {
		'id': allowUndefined(stringToJson)(`${name}.id`, value['id']),
		'name': allowUndefined(stringToJson)(`${name}.name`, value['name']),
		'email': allowUndefined(stringToJson)(`${name}.email`, value['email']),
		'mobile': allowUndefined(stringToJson)(`${name}.mobile`, value['mobile']),
		'address': allowUndefined(stringToJson)(`${name}.address`, value['address']),
		'specialization': allowUndefined(stringToJson)(`${name}.specialization`, value['specialization']),
	}

	return result
}

export function modelApiGetDoctorDataFromJson(name: string, value: any): Api.GetDoctorData {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.GetDoctorData = modelApiGetDoctorDataFromJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.GetDoctorData: ${key}`)
		}
	}

	return result
}

export function modelApiGetDoctorDataToJson(name: string, value: Api.GetDoctorData): ToJson<Api.GetDoctorData> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToJson<Api.GetDoctorData> = modelApiGetDoctorDataToJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.GetDoctorData: ${key}`)
		}
	}

	return result
}

const ApiGetProfile200ResponseKeys: string[] = ['name', 'email', 'gender', 'mobile', 'address', 'age', 'medical_history']

function modelApiGetProfile200ResponseFromJsonContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.GetProfile200Response {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiGetProfile200ResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.GetProfile200Response = {
		'name': allowUndefined(stringFromJson)(`${name}.name`, value['name']),
		'email': allowUndefined(stringFromJson)(`${name}.email`, value['email']),
		'gender': allowUndefined(stringFromJson)(`${name}.gender`, value['gender']),
		'mobile': allowUndefined(stringFromJson)(`${name}.mobile`, value['mobile']),
		'address': allowUndefined(stringFromJson)(`${name}.address`, value['address']),
		'age': allowUndefined(numberFromJson)(`${name}.age`, value['age']),
		'medical_history': allowUndefined(stringFromJson)(`${name}.medical_history`, value['medical_history']),
	}

	return result
}

function modelApiGetProfile200ResponseToJsonContent(name: string, value: Api.GetProfile200Response, knownKeys: Record<string, boolean> = {}): ToJson<Api.GetProfile200Response> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiGetProfile200ResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToJson<Api.GetProfile200Response> = {
		'name': allowUndefined(stringToJson)(`${name}.name`, value['name']),
		'email': allowUndefined(stringToJson)(`${name}.email`, value['email']),
		'gender': allowUndefined(stringToJson)(`${name}.gender`, value['gender']),
		'mobile': allowUndefined(stringToJson)(`${name}.mobile`, value['mobile']),
		'address': allowUndefined(stringToJson)(`${name}.address`, value['address']),
		'age': allowUndefined(numberToJson)(`${name}.age`, value['age']),
		'medical_history': allowUndefined(stringToJson)(`${name}.medical_history`, value['medical_history']),
	}

	return result
}

export function modelApiGetProfile200ResponseFromJson(name: string, value: any): Api.GetProfile200Response {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.GetProfile200Response = modelApiGetProfile200ResponseFromJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.GetProfile200Response: ${key}`)
		}
	}

	return result
}

export function modelApiGetProfile200ResponseToJson(name: string, value: Api.GetProfile200Response): ToJson<Api.GetProfile200Response> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToJson<Api.GetProfile200Response> = modelApiGetProfile200ResponseToJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.GetProfile200Response: ${key}`)
		}
	}

	return result
}

const ApiGetProfile404ResponseKeys: string[] = ['message']

function modelApiGetProfile404ResponseFromJsonContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.GetProfile404Response {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiGetProfile404ResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.GetProfile404Response = {
		'message': allowUndefined(stringFromJson)(`${name}.message`, value['message']),
	}

	return result
}

function modelApiGetProfile404ResponseToJsonContent(name: string, value: Api.GetProfile404Response, knownKeys: Record<string, boolean> = {}): ToJson<Api.GetProfile404Response> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiGetProfile404ResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToJson<Api.GetProfile404Response> = {
		'message': allowUndefined(stringToJson)(`${name}.message`, value['message']),
	}

	return result
}

export function modelApiGetProfile404ResponseFromJson(name: string, value: any): Api.GetProfile404Response {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.GetProfile404Response = modelApiGetProfile404ResponseFromJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.GetProfile404Response: ${key}`)
		}
	}

	return result
}

export function modelApiGetProfile404ResponseToJson(name: string, value: Api.GetProfile404Response): ToJson<Api.GetProfile404Response> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToJson<Api.GetProfile404Response> = modelApiGetProfile404ResponseToJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.GetProfile404Response: ${key}`)
		}
	}

	return result
}

const ApiSignIn200ResponseKeys: string[] = ['email', 'id', 'token']

function modelApiSignIn200ResponseFromJsonContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.SignIn200Response {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiSignIn200ResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.SignIn200Response = {
		'email': allowUndefined(stringFromJson)(`${name}.email`, value['email']),
		'id': allowUndefined(stringFromJson)(`${name}.id`, value['id']),
		'token': allowUndefined(stringFromJson)(`${name}.token`, value['token']),
	}

	return result
}

function modelApiSignIn200ResponseToJsonContent(name: string, value: Api.SignIn200Response, knownKeys: Record<string, boolean> = {}): ToJson<Api.SignIn200Response> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiSignIn200ResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToJson<Api.SignIn200Response> = {
		'email': allowUndefined(stringToJson)(`${name}.email`, value['email']),
		'id': allowUndefined(stringToJson)(`${name}.id`, value['id']),
		'token': allowUndefined(stringToJson)(`${name}.token`, value['token']),
	}

	return result
}

export function modelApiSignIn200ResponseFromJson(name: string, value: any): Api.SignIn200Response {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.SignIn200Response = modelApiSignIn200ResponseFromJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.SignIn200Response: ${key}`)
		}
	}

	return result
}

export function modelApiSignIn200ResponseToJson(name: string, value: Api.SignIn200Response): ToJson<Api.SignIn200Response> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToJson<Api.SignIn200Response> = modelApiSignIn200ResponseToJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.SignIn200Response: ${key}`)
		}
	}

	return result
}

const ApiSignIn404ResponseKeys: string[] = ['message']

function modelApiSignIn404ResponseFromJsonContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.SignIn404Response {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiSignIn404ResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.SignIn404Response = {
		'message': allowUndefined(stringFromJson)(`${name}.message`, value['message']),
	}

	return result
}

function modelApiSignIn404ResponseToJsonContent(name: string, value: Api.SignIn404Response, knownKeys: Record<string, boolean> = {}): ToJson<Api.SignIn404Response> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiSignIn404ResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToJson<Api.SignIn404Response> = {
		'message': allowUndefined(stringToJson)(`${name}.message`, value['message']),
	}

	return result
}

export function modelApiSignIn404ResponseFromJson(name: string, value: any): Api.SignIn404Response {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.SignIn404Response = modelApiSignIn404ResponseFromJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.SignIn404Response: ${key}`)
		}
	}

	return result
}

export function modelApiSignIn404ResponseToJson(name: string, value: Api.SignIn404Response): ToJson<Api.SignIn404Response> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToJson<Api.SignIn404Response> = modelApiSignIn404ResponseToJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.SignIn404Response: ${key}`)
		}
	}

	return result
}

const ApiSignIn500ResponseKeys: string[] = ['message']

function modelApiSignIn500ResponseFromJsonContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.SignIn500Response {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiSignIn500ResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.SignIn500Response = {
		'message': allowUndefined(stringFromJson)(`${name}.message`, value['message']),
	}

	return result
}

function modelApiSignIn500ResponseToJsonContent(name: string, value: Api.SignIn500Response, knownKeys: Record<string, boolean> = {}): ToJson<Api.SignIn500Response> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiSignIn500ResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToJson<Api.SignIn500Response> = {
		'message': allowUndefined(stringToJson)(`${name}.message`, value['message']),
	}

	return result
}

export function modelApiSignIn500ResponseFromJson(name: string, value: any): Api.SignIn500Response {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.SignIn500Response = modelApiSignIn500ResponseFromJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.SignIn500Response: ${key}`)
		}
	}

	return result
}

export function modelApiSignIn500ResponseToJson(name: string, value: Api.SignIn500Response): ToJson<Api.SignIn500Response> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToJson<Api.SignIn500Response> = modelApiSignIn500ResponseToJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.SignIn500Response: ${key}`)
		}
	}

	return result
}

const ApiSignInRequestKeys: string[] = ['email', 'password']

function modelApiSignInRequestFromJsonContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.SignInRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiSignInRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.SignInRequest = {
		'email': allowUndefined(stringFromJson)(`${name}.email`, value['email']),
		'password': allowUndefined(stringFromJson)(`${name}.password`, value['password']),
	}

	return result
}

function modelApiSignInRequestToJsonContent(name: string, value: Api.SignInRequest, knownKeys: Record<string, boolean> = {}): ToJson<Api.SignInRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiSignInRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToJson<Api.SignInRequest> = {
		'email': allowUndefined(stringToJson)(`${name}.email`, value['email']),
		'password': allowUndefined(stringToJson)(`${name}.password`, value['password']),
	}

	return result
}

export function modelApiSignInRequestFromJson(name: string, value: any): Api.SignInRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.SignInRequest = modelApiSignInRequestFromJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.SignInRequest: ${key}`)
		}
	}

	return result
}

export function modelApiSignInRequestToJson(name: string, value: Api.SignInRequest): ToJson<Api.SignInRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToJson<Api.SignInRequest> = modelApiSignInRequestToJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.SignInRequest: ${key}`)
		}
	}

	return result
}

const ApiUpdatepatient200ResponseKeys: string[] = ['message']

function modelApiUpdatepatient200ResponseFromJsonContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.Updatepatient200Response {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiUpdatepatient200ResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.Updatepatient200Response = {
		'message': allowUndefined(stringFromJson)(`${name}.message`, value['message']),
	}

	return result
}

function modelApiUpdatepatient200ResponseToJsonContent(name: string, value: Api.Updatepatient200Response, knownKeys: Record<string, boolean> = {}): ToJson<Api.Updatepatient200Response> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiUpdatepatient200ResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToJson<Api.Updatepatient200Response> = {
		'message': allowUndefined(stringToJson)(`${name}.message`, value['message']),
	}

	return result
}

export function modelApiUpdatepatient200ResponseFromJson(name: string, value: any): Api.Updatepatient200Response {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.Updatepatient200Response = modelApiUpdatepatient200ResponseFromJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.Updatepatient200Response: ${key}`)
		}
	}

	return result
}

export function modelApiUpdatepatient200ResponseToJson(name: string, value: Api.Updatepatient200Response): ToJson<Api.Updatepatient200Response> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToJson<Api.Updatepatient200Response> = modelApiUpdatepatient200ResponseToJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.Updatepatient200Response: ${key}`)
		}
	}

	return result
}

const ApiUpdatepatient404ResponseKeys: string[] = ['message']

function modelApiUpdatepatient404ResponseFromJsonContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.Updatepatient404Response {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiUpdatepatient404ResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.Updatepatient404Response = {
		'message': allowUndefined(stringFromJson)(`${name}.message`, value['message']),
	}

	return result
}

function modelApiUpdatepatient404ResponseToJsonContent(name: string, value: Api.Updatepatient404Response, knownKeys: Record<string, boolean> = {}): ToJson<Api.Updatepatient404Response> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiUpdatepatient404ResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToJson<Api.Updatepatient404Response> = {
		'message': allowUndefined(stringToJson)(`${name}.message`, value['message']),
	}

	return result
}

export function modelApiUpdatepatient404ResponseFromJson(name: string, value: any): Api.Updatepatient404Response {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.Updatepatient404Response = modelApiUpdatepatient404ResponseFromJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.Updatepatient404Response: ${key}`)
		}
	}

	return result
}

export function modelApiUpdatepatient404ResponseToJson(name: string, value: Api.Updatepatient404Response): ToJson<Api.Updatepatient404Response> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToJson<Api.Updatepatient404Response> = modelApiUpdatepatient404ResponseToJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.Updatepatient404Response: ${key}`)
		}
	}

	return result
}
