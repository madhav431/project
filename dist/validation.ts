/* eslint-disable */
// tslint:disable
/**
 * Hospital Management Service
 * 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator+.
 * https://github.com/karlvr/openapi-generator-plus
 * Do not edit the class manually.
 */

import { Express } from 'express'
import { Api } from './models'

type FromJsonFunction<T> = (name: string, value: any) => T
type MapOf<T> = { [name: string]: T }

/**
 * A conditional type to convert an interface model to the equivalent JSON model.
 * We may represent dates as Date objects in our object model, but we must translate
 * them to strings for the JSON model.
 */
type ToJson<T> =
	T extends Date ? string
	: T extends object ? {
		[P in keyof T]: ToJson<T[P]>
	}
	: T extends (infer R)[] ? ToJson<R>[]
	: T

export function arrayFromJson<T>(next: FromJsonFunction<T>): FromJsonFunction<T[]> {
	return function(name: string, value: any) {
		if (typeof value !== 'object' || typeof value.length !== 'number') {
			throw `Invalid type for ${name}: expected array got ${typeof value}`
		}
	
		const result: T[] = []
		for (const el of value) {
			result.push(next(name, el))
		}
		return result
	}
}

export function arrayToJson<T>(next: FromJsonFunction<T>): FromJsonFunction<T[]> {
	return arrayFromJson(next)
}

export function mapFromJson<T>(next: FromJsonFunction<T>): FromJsonFunction<MapOf<T>> {
	return function(name: string, value: any) {
		if (typeof value !== 'object') {
			throw `Invalid type for ${name}: expected object got ${typeof value}`
		}
	
		const result: MapOf<T> = {}
		for (const key in value) {
			if (value.hasOwnProperty(key)) {
				result[key] = next(name, value[key])
			}
		}
		return result
	}
}

export function mapToJson<T>(next: FromJsonFunction<T>): FromJsonFunction<MapOf<T>> {
	return mapFromJson(next)
}

export function allowNull<T>(next: FromJsonFunction<T>): FromJsonFunction<T | null> {
	return function(name: string, value: any) {
		if (value === null) {
			return null
		}
		return next(name, value)
	}
}

export function allowUndefined<T>(next: FromJsonFunction<T>): FromJsonFunction<T | undefined> {
	return function(name: string, value: any) {
		if (value === undefined) {
			return undefined
		}
		return next(name, value)
	}
}

export function allowNullOrUndefined<T>(next: FromJsonFunction<T>): FromJsonFunction<T | null | undefined> {
	return function(name: string, value: any) {
		if (value === null) {
			return null
		}
		if (value === undefined) {
			return undefined
		}
		return next(name, value)
	}
}

export function unsupportedFromJson(name: string, value: any): unknown {
	if (value === undefined) {
		throw `Invalid type for ${name}: expected unknown got undefined`
	}
	return value
}

export function unsupportedToJson(name: string, value: unknown): any {
	return unsupportedFromJson(name, value)
}

export function parseUnsupported(name: string, value: any): unknown {
	if (value === undefined) {
		throw `Invalid value for ${name}: expected unknown got undefined`
	}
	return value
}

export function booleanFromJson(name: string, value: any): boolean {
	if (typeof value !== 'boolean') {
		throw `Invalid type for ${name}: expected boolean got ${typeof value}`
	}
	return value
}

export function booleanToJson(name: string, value: boolean): any {
	return booleanFromJson(name, value)
}

export function parseBoolean(name: string, value: any): boolean {
	if (value === 'true') {
		return true
	} else if (value === 'false') {
		return false
	} else {
		throw `Invalid value for ${name}: expected boolean got "${value}"`
	}
}

export function stringFromJson(name: string, value: any): string {
	if (typeof value !== 'string') {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}
	return value
}

export function stringToJson(name: string, value: string): any {
	return stringFromJson(name, value)
}

export function binaryFromJson(name: string, value: any): Buffer {
	if (typeof value !== 'string') {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}
	return new Buffer(value, 'base64')
}

export function binaryToJson(name: string, value: string | Buffer): string {
	if (typeof value === 'string') {
		return value
	} else {
		return value.toString('base64')
	}
}

export function parseString(name: string, value: any): string {
	if (value === undefined) {
		throw `Invalid value for ${name}: expected string got undefined`
	}
	if (typeof value === 'string') {
		return value
	}
	if (typeof value === 'object' && typeof value.length === 'number') {
		if (value.length > 0) {
			return value[0]
		}
	}

	throw `Invalid value for ${name}: expected string got ${typeof value}`
}

export function integerFromJson(name: string, value: any): number {
	if (typeof value !== 'number') {
		throw `Invalid type for ${name}: expected number got ${typeof value}`
	}
	if (isNaN(value)) {
		throw `Invalid NaN for ${name}`
	}
	if (Math.floor(value) !== value) {
		throw `Invalid value for ${name}: expected integer got "${value}"`
	}
	return value
}

export function integerToJson(name: string, value: number): any {
	return integerFromJson(name, value)
}

export function parseInteger(name: string, value: any): number {
	if (typeof value === 'object' && typeof value.length === 'number' && value.length > 0) {
		value = value[0]
	}
	if (typeof value === 'string') {
		if (value.indexOf('.') !== -1) {
			throw `Invalid value for ${name}: expected integer got "${value}"`
		}

		const result = parseInt(value, 10)
		if (isNaN(result)) {
			throw `Invalid value for ${name}: expected integer got "${value}"`
		}
		return result
	}
	throw `Invalid value for ${name}: expected integer got ${typeof value}`
}

export function numberFromJson(name: string, value: any): number {
	if (typeof value !== 'number') {
		throw `Invalid type for ${name}: expected number got ${typeof value}`
	}
	if (isNaN(value)) {
		throw `Invalid NaN for ${name}`
	}
	return value
}

export function numberToJson(name: string, value: number): any {
	return numberFromJson(name, value)
}

export function parseNumber(name: string, value: any): number {
	if (typeof value === 'object' && typeof value.length === 'number' && value.length > 0) {
		value = value[0]
	}
	if (typeof value === 'string') {
		const result = parseFloat(value)
		if (isNaN(result)) {
			throw `Invalid value for ${name}: expected float got "${value}"`
		}
		return result
	}
	throw `Invalid value for ${name}: expected number got ${typeof value}`
}

export function dateFromJson(name: string, value: any): string {
	if (typeof value !== 'string') {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}
	if (!value.match(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)) {
		throw `Invalid value for ${name}: expected valid date string got "${value}"`
	}
	return value
}

export function parseDate(name: string, value: any): string {
	return dateFromJson(name, value)
}

export function dateToJson(name: string, value: string): string {
	return dateFromJson(name, value)
}

export function dateTimeFromJson(name: string, value: any): Date {
	if (typeof value !== 'string') {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}
	if (!value.match(/^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}(:[0-9]{2}(\.[0-9]+)?)?(Z|(\+|-)[0-9]{2}(:?[0-9]{2})?)$/)) {
		throw `Invalid value for ${name}: expected valid datetime string got "${value}"`
	}
	return new Date(value)
}

export function parseDateTime(name: string, value: any): Date {
	return dateTimeFromJson(name, value)
}

export function dateTimeToJson(name: string, value: Date): string {
	if (typeof value !== 'object' || typeof value.toISOString !== 'function') {
		throw `Invalid type for ${name}: expected Date got ${typeof value}`
	}
	return value.toISOString()
}

export function timeFromJson(name: string, value: any): string {
	if (typeof value !== 'string') {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}
	if (!value.match(/^[0-9]{2}:[0-9]{2}(:[0-9]{2}(\.[0-9]+)?)?$/)) {
		throw `Invalid value for ${name}: expected valid time string got "${value}"`
	}
	return value
}

export function parseTime(name: string, value: any): string {
	return timeFromJson(name, value)
}

export function timeToJson(name: string, value: string): string {
	return timeFromJson(name, value)
}

/* Model conversion functions */

const ApiCreateUserKeys: string[] = ['userName', 'userEmail', 'userPassword']

function modelApiCreateUserFromJsonContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CreateUser {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCreateUserKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CreateUser = {
		'userName': allowUndefined(stringFromJson)(`${name}.userName`, value['userName']),
		'userEmail': allowUndefined(stringFromJson)(`${name}.userEmail`, value['userEmail']),
		'userPassword': allowUndefined(stringFromJson)(`${name}.userPassword`, value['userPassword']),
	}

	return result
}

function modelApiCreateUserToJsonContent(name: string, value: Api.CreateUser, knownKeys: Record<string, boolean> = {}): ToJson<Api.CreateUser> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCreateUserKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToJson<Api.CreateUser> = {
		'userName': allowUndefined(stringToJson)(`${name}.userName`, value['userName']),
		'userEmail': allowUndefined(stringToJson)(`${name}.userEmail`, value['userEmail']),
		'userPassword': allowUndefined(stringToJson)(`${name}.userPassword`, value['userPassword']),
	}

	return result
}

export function modelApiCreateUserFromJson(name: string, value: any): Api.CreateUser {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CreateUser = modelApiCreateUserFromJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.CreateUser: ${key}`)
		}
	}

	return result
}

export function modelApiCreateUserToJson(name: string, value: Api.CreateUser): ToJson<Api.CreateUser> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToJson<Api.CreateUser> = modelApiCreateUserToJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.CreateUser: ${key}`)
		}
	}

	return result
}

const ApiCreateUser201ResponseKeys: string[] = ['message']

function modelApiCreateUser201ResponseFromJsonContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CreateUser201Response {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCreateUser201ResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CreateUser201Response = {
		'message': allowUndefined(stringFromJson)(`${name}.message`, value['message']),
	}

	return result
}

function modelApiCreateUser201ResponseToJsonContent(name: string, value: Api.CreateUser201Response, knownKeys: Record<string, boolean> = {}): ToJson<Api.CreateUser201Response> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCreateUser201ResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToJson<Api.CreateUser201Response> = {
		'message': allowUndefined(stringToJson)(`${name}.message`, value['message']),
	}

	return result
}

export function modelApiCreateUser201ResponseFromJson(name: string, value: any): Api.CreateUser201Response {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CreateUser201Response = modelApiCreateUser201ResponseFromJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.CreateUser201Response: ${key}`)
		}
	}

	return result
}

export function modelApiCreateUser201ResponseToJson(name: string, value: Api.CreateUser201Response): ToJson<Api.CreateUser201Response> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToJson<Api.CreateUser201Response> = modelApiCreateUser201ResponseToJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.CreateUser201Response: ${key}`)
		}
	}

	return result
}

const ApiCreateUser404ResponseKeys: string[] = ['message']

function modelApiCreateUser404ResponseFromJsonContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CreateUser404Response {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCreateUser404ResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CreateUser404Response = {
		'message': allowUndefined(stringFromJson)(`${name}.message`, value['message']),
	}

	return result
}

function modelApiCreateUser404ResponseToJsonContent(name: string, value: Api.CreateUser404Response, knownKeys: Record<string, boolean> = {}): ToJson<Api.CreateUser404Response> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCreateUser404ResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToJson<Api.CreateUser404Response> = {
		'message': allowUndefined(stringToJson)(`${name}.message`, value['message']),
	}

	return result
}

export function modelApiCreateUser404ResponseFromJson(name: string, value: any): Api.CreateUser404Response {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CreateUser404Response = modelApiCreateUser404ResponseFromJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.CreateUser404Response: ${key}`)
		}
	}

	return result
}

export function modelApiCreateUser404ResponseToJson(name: string, value: Api.CreateUser404Response): ToJson<Api.CreateUser404Response> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToJson<Api.CreateUser404Response> = modelApiCreateUser404ResponseToJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.CreateUser404Response: ${key}`)
		}
	}

	return result
}
